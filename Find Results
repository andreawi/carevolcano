Searching 18263 files for "'"

/Users/n635185/Desktop/ITGirls/carevolcano/actions/message.js:
    1: import { SET_MESSAGE } from '../types/message';
    2  export const setMessage = (message) => {
    3    return dispatch => {

/Users/n635185/Desktop/ITGirls/carevolcano/components/InputPreview.js:
    1: import React from 'react';
    2  export default class InputPreview extends React.Component {
    3   render () {

/Users/n635185/Desktop/ITGirls/carevolcano/containers/App.js:
    1: import React, {Component} from 'react';
    2: import InputPreview from '../components/InputPreview';
    3: import {connect} from 'react-redux';
    4  
    5  class App extends Component {

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/acorn-dynamic-import/node_modules/acorn/README.md:
  127  
  128    When the `locations` options is on, the `{line, column}` locations
  129:   of the comment's start and end are passed as two additional
  130    parameters.
  131  
  ...
  166  
  167  - **sourceFile**: When the `locations` option is `true`, you can pass
  168:   this option to add a `source` attribute in every node's `loc`
  169    object. Note that the contents of this option are not examined or
  170    processed in any way; you are free to use whatever format you

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/acorn/README.md:
  127  
  128    When the `locations` options is on, the `{line, column}` locations
  129:   of the comment's start and end are passed as two additional
  130    parameters.
  131  
  ...
  166  
  167  - **sourceFile**: When the `locations` option is `true`, you can pass
  168:   this option to add a `source` attribute in every node's `loc`
  169    object. Note that the contents of this option are not examined or
  170    processed in any way; you are free to use whatever format you

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/ajv/dist/regenerator.min.js:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/argparse/lib/action/store.js:
    2   * class ActionStore
    3   *
    4:  * This action just stores the argument's value. This is the default action.
    5   *
    6   * This class inherited from [[Action]]

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/argparse/README.md:
  148  should be handled. The supported actions are:
  149  
  150: - ```store``` - Just stores the argument's value. This is the default action.
  151  - ```storeConst``` - Stores value, specified by the const keyword argument.
  152    (Note that the const keyword argument defaults to the rather unhelpful None.)

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/asap/browser-raw.js:
  132  // soon as possible.
  133  // This is useful to prevent an error thrown in a task from stalling the event
  134: // queue if the exception handled by Node.js's
  135  // `process.on("uncaughtException")` or by a domain.
  136  rawAsap.requestFlush = requestFlush;

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/asap/README.md:
    6  programs and libraries, often need a mechanism to postpone the execution of a
    7  callback until the next available event.
    8: (See [Designing API's for Asynchrony][Zalgo].)
    9  The `asap` function executes a task **as soon as possible** but not before it
   10  returns, waiting only for the completion of the current event and previously
   ..
   47  `requestAnimationFrame` instead.
   48  A long sequence of tasks can also effect the long running script dialog.
   49: If this is a problem, you may be able to use ASAP's cousin `setImmediate` to
   50  break long processes into shorter intervals and periodically allow the browser
   51  to breathe.
   ..
  204  [NCZ]: http://www.nczonline.net/blog/2013/07/09/the-case-for-setimmediate/
  205  
  206: Ember's RSVP promise implementation later [adopted][RSVP ASAP] the name ASAP but
  207  further developed the implentation.
  208  Particularly, The `MessagePort` implementation was abandoned due to interaction

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/async-each/README.md:
    9  ## Installation
   10  * Just include async-each before your scripts.
   11: * `npm install async-each` if you're using node.js.
   12: * `bower install async-each` if you're using [Bower](http://bower.io).
   13  
   14  ## Usage

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/autoprefixer/CHANGELOG.md:
  278  * Allow Safari 6.1 to use final Flexbox spec (by John Kreitlow).
  279  * Fix `filter` value in `transition` in Webkits.
  280: * Show greetings if your browsers don't require any prefixes.
  281  * Add `<=` and `<` browsers requirement (by Andreas Lind).
  282  
  ...
  296  ## 2.1.1
  297  * Fix `-webkit-background-size` hack for `contain` and `cover` values.
  298: * Don't add `-webkit-` prefix to `filter` with SVG (by Vincent De Oliveira).
  299  
  300  ## 2.1 “Eleftheria i thanatos”
  ...
  304  ## 2.0.2
  305  * Add readable names for new browsers from 2.0 release.
  306: * Don't add `-webkit-` prefix to `filter` with SVG URI.
  307: * Don't add `-o-` prefix 3D transforms.
  308  
  309  ## 2.0.1
  ...
  365  
  366  ### 20140327:
  367: * Don't use `-ms-transform` in `@keyframes`, because IE 9 doesn't support
  368    animations.
  369  * Update BlackBerry 10 data.
  ...
  428  * Safer backgrounds list parser in gradient hack.
  429  * Prefix `@keyframes` inside `@media`.
  430: * Don't prefix values for CSS3 PIE properties.
  431  * Binary now shows file name in syntax error.
  432  * Use browserify to build standalone version.
  ...
  464  
  465  ### 20140213:
  466: * Add case insensitive to IE's filter hack (by Dominik Schilling).
  467  * Improve selector prefixing in some rare cases (by Simon Lydell).
  468  * Firefox 27 is moved to released versions.
  ...
  488  ### 20130906:
  489  * Fix direction syntax in radial gradients.
  490: * Don't prefix IE filter with modern syntax.
  491  
  492  ### 20130911:
  ...
  510  
  511  ### 20131007:
  512: * Don't add another prefixes in rule with prefixed selector.
  513  
  514  ### 20131009:
  ...
  587  
  588  ### 20130728:
  589: * Don't remove non-standard -webkit-background-clip: text.
  590: * Don't remove IE hack on CSS parse.
  591  
  592  ### 20130729:
  ...
  613  ### 20130617:
  614  * Remove old Mozilla border-radius.
  615: * Don't prefix old IE filter.
  616  * Remove old background-clip, background-size and background-origin prefixes.
  617  * Speed up regexps in values.
  ...
  659  ## 0.3 “Growing Strong”
  660  * Rename `autoprefixer.filter()` to `autoprefixer.rework()`.
  661: * Use own filters instead of Rework's `prefix` and `prefixValue`.
  662  * Smarter value prefixer without false match “order” in “border”.
  663  * 40% faster.
  664: * Don't add unnecessary properties instead of Rework's `prefixValue`.
  665: * Don't change properties order.
  666  * Sort properties and values in inspect output.
  667  * Add main to component config (by Jonathan Ong).
  ...
  677  
  678  ### 20130502:
  679: * Don't add -webkit- prefix to IE filter.
  680: * Don't duplicate prefixes on second run.
  681  
  682  ## 0.2 “Hear Me Roar!”

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/autoprefixer/README.md:
   59  
   60  Working with Autoprefixer is simple: just forget about vendor prefixes
   61: and write normal CSS according to the latest W3C specs. You don't need
   62  a special language (like Sass) or remember where you must use mixins.
   63  
   ..
  205  [Oldie]:                  https://github.com/jonathantneal/oldie
  206  
  207: #### Why doesn't Autoprefixer add prefixes to `border-radius`?
  208  
  209  Developers are often surprised by how few prefixes are required today.
  210: If Autoprefixer doesn't add prefixes to your CSS, check if they're still
  211  required on [Can I Use].
  212  
  ...
  224  
  225  Autoprefixer needs unprefixed property to add prefixes. So if you only
  226: wrote `-webkit-gradient` without W3C's `gradient`,
  227  Autoprefixer will not add other prefixes.
  228  
  ...
  244  for prefixing ePub3 properties.
  245  
  246: #### Why doesn't Autoprefixer transform generic font-family `system-ui`?
  247  
  248  `system-ui` is technically not a prefix and the transformation is not future-proof. But you can use [postcss-font-family-system-ui](https://github.com/JLHwung/postcss-font-family-system-ui) to transform `system-ui` to a practical font-family list.
  ...
  431  and automatization.
  432  
  433: But, if you can't move to a build tool, you can use text editor plugins:
  434  
  435  * [Sublime Text](https://github.com/sindresorhus/sublime-autoprefixer)

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/aws4/aws4.js:
   62  
   63    // ES's hostParts are sometimes the other way round, if the value that is expected
   64:   // to be region equals 'es' switch them back
   65    // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com
   66    if (hostParts[1] === 'es')

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/babel-preset-stage-1/README.md:
    9  > **What is it?** A formal proposal for the feature.
   10  >
   11: > **What's required?** A so-called champion must be identified who is responsible for the proposal. Either the champion or a co-champion must be a member of TC39 (source). The problem solved by the proposal must be described in prose. The solution must be described via examples, an API and a discussion of semantics and algorithms. Lastly, potential obstacles for the proposal must be identified, such as interactions with other features and implementation challenges. Implementation-wise, polyfills and demos are needed.
   12  >
   13: > **What's next?** By accepting a proposal for stage 1, TC39 declares its willingness to examine, discuss and contribute to the proposal. Going forward, major changes to the proposal are expected
   14  
   15  ## Install

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/babel-preset-stage-2/README.md:
    9  > **What is it?** A first version of what will be in the specification. At this point, an eventual inclusion of the feature in the standard is likely.
   10  > 
   11: > **What's required?** The proposal must now additionally have a formal description of the syntax and semantics of the feature (using the formal language of the ECMAScript specification). The description should be as complete as possible, but can contain todos and placeholders. Two experimental implementations of the feature are needed, but one of them can be in a transpiler such as Babel.
   12  >
   13: > **What's next?** Only incremental changes are expected from now on.
   14  
   15  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/babel-preset-stage-3/README.md:
    9  > **What is it?** The proposal is mostly finished and now needs feedback from implementations and users to progress further.
   10  
   11: > **What's required?** The spec text must be complete. Designated reviewers (appointed by TC39, not by the champion) and the ECMAScript spec editor must sign off on the spec text. There must be at least two spec-compliant implementations (which don't have to be enabled by default).
   12  >
   13: > **What's next?** Henceforth, changes should only be made in response to critical issues raised by the implementations and their use.
   14  
   15  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/boom/images/boom.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/browserslist/CHANGELOG.md:
   44  * Add JSDoc.
   45  * Fix tests on Windows (by Anna Stoliar).
   46: * Don't set custom usage statistics globally.
   47  
   48  ## 1.4

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/buffer/test/node/test-buffer-ascii.js:
    9  assert.equal(Buffer.from('hérité').toString('ascii'), 'hC)ritC)');
   10  
   11: // 71 characters, 78 bytes. The ' character is a triple-byte sequence.
   12: var input = 'C'est, graphiquement, la réunion d'un accent aigu ' +
   13:             'et d'un accent grave.';
   14  
   15  var expected = 'Cb\u0000\u0019est, graphiquement, la rC)union ' +

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/caniuse-db/CONTRIBUTING.md:
   10  Maintaining these files on GitHub allows anyone to update or contribute to the support data on the site.
   11  
   12: **Note:** when submitting a patch, don't modify the minified `data.json` file in the root — that is done automatically. Only modify the contents of the `features-json` directory.
   13  
   14  ### How it works

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/chokidar/index.js:
  144    this.options = opts;
  145  
  146:   // You're frozen when your heart's not open.
  147    Object.freeze(opts);
  148  }

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/clone/README.md:
  102  If you encounter any bugs or issues, feel free to [open an issue at
  103  github](https://github.com/pvorb/node-clone/issues) or send me an email to
  104: <paul@vorba.ch>. I also always like to hear from you, if you're using my code.
  105  
  106  ## License

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/coa/coverage/sort-arrow-sprite.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/commander/CHANGELOG.md:
  145   * added `Command.prototype.opts` to retrieve all the options as a simple object of key-value pairs. Closes #262 @tonylukasavage
  146   * fixed a bug on subcommand name. Closes #248 @jonathandelgado
  147:  * fixed function normalize doesn't honor option terminator. Closes #216 @abbr
  148  
  149  2.3.0 / 2014-07-16

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/commander/Readme.md:
  240  
  241  You can enable `--harmony` option in two ways:
  242: * Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. Note some os version don't support this pattern.
  243  * Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process.
  244  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/css-selector-tokenizer/node_modules/regexpu-core/package.json:
   37    },
   38    "deprecated": false,
   39:   "description": "regexpu's core functionality (i.e. `rewritePattern(pattern, flag)`), capable of translating ES6 Unicode regular expressions to ES5.",
   40    "devDependencies": {
   41      "coveralls": "^2.11.2",

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/css-selector-tokenizer/node_modules/regexpu-core/README.md:
    3  _regexpu_ is a source code transpiler that enables the use of ES6 Unicode regular expressions in JavaScript-of-today (ES5).
    4  
    5: _regexpu-core_ contains _regexpu_'s core functionality, i.e. `rewritePattern(pattern, flag)`, which enables rewriting regular expressions that make use of [the ES6 `u` flag](https://mathiasbynens.be/notes/es6-unicode-regex) into equivalent ES5-compatible regular expression patterns.
    6  
    7  ## Installation

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/cssesc/bin/cssesc:
  100  		if (!process.stdout.isTTY) {
  101  			// The script was called from a non-TTY context. This is a rather uncommon
  102: 			// use case we don't actively support. However, we don't want the script
  103  			// to wait forever in such cases, so…
  104  			timeout = setTimeout(function() {

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/cssesc/cssesc.js:
   66  			character = string.charAt(counter++);
   67  			codePoint = character.charCodeAt();
   68: 			// if it's not a printable ASCII character
   69  			if (codePoint < 0x20 || codePoint > 0x7E) {
   70  				if (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {
   ..
  126  
  127  		// Remove spaces after `\HEX` escapes that are not followed by a hex digit,
  128: 		// since they're redundant. Note that this is only possible if the escape
  129: 		// sequence isn't preceded by an odd number of backslashes.
  130  		output = output.replace(regexExcessiveSpaces, function($0, $1, $2) {
  131  			if ($1 && $1.length % 2) {
  132: 				// it's not safe to remove the space, so don't
  133  				return $0;
  134  			}

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/cssesc/README.md:
    3  A JavaScript library for escaping CSS strings and identifiers while generating the shortest possible ASCII-only output.
    4  
    5: This is a JavaScript library for [escaping text for use in CSS strings or identifiers](http://mathiasbynens.be/notes/css-escapes) while generating the shortest possible valid ASCII-only output. [Here's an online demo.](http://mothereff.in/css-escapes)
    6  
    7  Feel free to fork if you see possible improvements!
    .
  193  After cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.
  194  
  195: Once that's done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.
  196  
  197  To generate [the code coverage report](http://rawgithub.com/mathiasbynens/cssesc/master/coverage/cssesc/cssesc.js.html), use `grunt cover`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/es-abstract/CHANGELOG.md:
  119  1.3.0 / 2015-08-15
  120  =================
  121:   * [New] ES6's ToNumber now supports binary and octal literals.
  122    * [Dev Deps] update `jscs`, `eslint`, `@ljharb/eslint-config`, `tape`
  123    * [Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/es-abstract/test/tests.js:
  179  				function () { ES.ToNumber(symbol); },
  180  				TypeError,
  181: 				'Symbols can't be converted to a Number: ' + debug(symbol)
  182  			);
  183  		});

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/es-to-primitive/CHANGELOG.md:
    1  1.1.1 / 2016-01-03
    2  =================
    3:   * [Fix: ES5] fix coercion logic: ES5's ToPrimitive does not coerce any primitive value, regardless of hint (#2)
    4  
    5  1.1.0 / 2015-12-27
    .
   16  1.0.1 / 2016-01-03
   17  =================
   18:   * [Fix: ES5] fix coercion logic: ES5's ToPrimitive does not coerce any primitive value, regardless of hint (#2)
   19    * [Deps] update `is-callable`, `is-date-object`
   20    * [Dev Deps] update `eslint`, `tape`, `semver`, `jscs`, `covert`, `nsp`, `@ljharb/eslint-config`

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/es5-ext/CHANGES:
  445  Stepped back from experimental ideas and introduced more standard approach
  446  taking example from how ES5 methods and functions are designed. One exceptions
  447: is that, we don't refrain from declaring methods for Object.prototype - it's up
  448  to developer whether how he decides to use it in his context (as function or as
  449  method).
  ...
  460  	methods (collected in Array folder). Now all methods are generic and are in
  461  	Array/prototype folder. This separation also meant, that methods in Array are
  462: 	usually destructive. We don't do that separation now, there's generally no use
  463  	case for destructive iterators, we should be fine with one version of each
  464  	method, (same as ES5 is fine with  e.g. one, non destructive 'filter' method)
  ...
  472  		necessarily functions)
  473  	** Number.prototype & String.prototype methods can be called on any value, in
  474: 		case of Number it it'll be degraded to number, in case of string it'll be
  475  		degraded to string.
  476  * Travis CI support (only for Node v0.6 branch, as v0.4 has buggy V8 version)
  ...
  478  Improvements for existing functions and methods:
  479  * Function.memoize (was Function.cache) is now fully generic, can operate on any
  480: 	type of arguments and it's NaN safe (all NaN objects are considered equal)
  481  * Method properties passed to Object.prototype.extend or
  482  	Object.prototype.override can aside of _super optionally take prototype object
  ...
  542  * Function.callBind -> use call.bind directly
  543  * Fuction.clone -> no valid use case
  544: * Function.dscope -> controversial approach, shouldn't be considered seriously
  545  * Function.functionalize -> It was experimental but standards are standards
  546: * List/sort/length -> It can be easy obtained by Object.getCompareBy('length')
  547: * List.concat -> Concat's for array-like's makes no sense, just convert to array
  548  	first
  549  * List.every -> Use Array.prototype.every directly
  ...
  551  * List.forEach -> User Array.prototype.forEach directly
  552  * List.isListObject -> No valid use case, do: isList(list) && (typeof list ===
  553: 	'object')
  554  * List.map -> Use Array.prototype.map directly
  555  * List.reduce -> Use Array.prototype.reduce directly
  ...
  564  * Object.mergeDeep -> no use case
  565  * Object.pluck -> no use case
  566: * Object.same -> it considered descriptors, now there's only Object.isDuplicate
  567  	which compares only enumerable properties
  568  * Object.sameType -> no use case

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/es5-ext/string/#/at.js:
   24  	len = 1;
   25  	if (
   26: 		// Check if it's the start of a surrogate pair
   27  		cuFirst >= 0xd800 &&
   28  		cuFirst <= 0xdbff && // High surrogate

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/es6-map/README.md:
    8  ### Usage
    9  
   10: It's safest to use *es6-map* as a [ponyfill](https://ponyfill.com) – a polyfill which doesn't touch global objects:
   11  
   12  ```javascript

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/build/Release/fse.node:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/build/stage/v1.1.2/fse-v1.1.2-node-v48-darwin-x64.tar.gz:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/lib/binding/Release/node-v11-darwin-x64/fse.node:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/lib/binding/Release/node-v46-darwin-x64/fse.node:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/lib/binding/Release/node-v47-darwin-x64/fse.node:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/lib/binding/Release/node-v48-darwin-x64/fse.node:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/ajv/dist/regenerator.min.js:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/aws4/aws4.js:
   62  
   63    // ES's hostParts are sometimes the other way round, if the value that is expected
   64:   // to be region equals 'es' switch them back
   65    // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com
   66    if (hostParts[1] === 'es')

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/boom/images/boom.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/hawk/images/hawk.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/hawk/images/logo.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/hoek/images/hoek.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/punycode/README.md:
   91  ### `punycode.toUnicode(input)`
   92  
   93: Converts a Punycode string representing a domain name or an email address to Unicode. Only the Punycoded parts of the input will be converted, i.e. it doesn't matter if you call it on a string that has already been converted to Unicode.
   94  
   95  ```js
   ..
  107  ### `punycode.toASCII(input)`
  108  
  109: Converts a lowercased Unicode string representing a domain name or an email address to Punycode. Only the non-ASCII parts of the input will be converted, i.e. it doesn't matter if you call it with a domain that's already in ASCII.
  110  
  111  ```js
  ...
  154  After cloning this repository, run `npm install --dev` to install the dependencies needed for Punycode.js development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.
  155  
  156: Once that's done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, PhantomJS, and web browsers as well, use `grunt test`.
  157  
  158  To generate the code coverage report, use `grunt cover`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md:
   23  
   24  ### What versioning scheme should be adopted?
   25: * group: +1's 3.0.0
   26  * domenic+group: pulling in patches from other sources where appropriate
   27  * mikeal: version independently, suggesting versions for io.js
   ..
   37    **action item:** domenic will check
   38  
   39: ### remove implicit flowing of streams on('data')
   40  * add isFlowing / isPaused
   41: * mikeal: worrying that we're documenting polyfill methods – confuses users
   42  * domenic: more reflective API is probably good, with warning labels for users
   43  * new section for mad scientists (reflective stream access)
   44  * calvin: name the “third state”
   45  * mikeal: maybe borrow the name from whatwg?
   46: * domenic: we're missing the “third state”
   47  * consensus: kind of difficult to name the third state
   48  * mikeal: figure out differences in states / compat

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/request/README.md:
   56  ```
   57  
   58: You can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types (in this case `application/json`) and use the proper `content-type` in the PUT request (if the headers don't already provide one).
   59  
   60  ```js
   ..
   91  ```
   92  
   93: Now let's get fancy.
   94  
   95  ```js
   ..
  756  - `oauth` - Options for OAuth HMAC-SHA1 signing. See documentation above.
  757  - `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).
  758: - `aws` - `object` containing AWS signing information. Should have the properties `key`, `secret`, and optionally `session` (note that this only works for services that require session as part of the canonical string). Also requires the property `bucket`, unless you're specifying your `bucket` as part of the path, or the request doesn't use a bucket (i.e. GET Services). If you want to use AWS sign version 4 use the parameter `sign_version` with value `4` otherwise the default is version 2. **Note:** you need to `npm install aws4` first.
  759  - `httpSignature` - Options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent's library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options.
  760  
  ...
 1059  ```
 1060  
 1061: To use a custom cookie jar (instead of `request`'s global cookie jar), set `jar` to an instance of `request.jar()` (either in `defaults` or `options`)
 1062  
 1063  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/tar/test/cb-never-called-1.0.1.tgz:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/fsevents/node_modules/tar/test/fixtures.tgz:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/har-validator/node_modules/ajv/dist/regenerator.min.js:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/hawk/images/hawk.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/hawk/images/logo.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/hoek/images/hoek.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/http-proxy/index.js:
    2   * Caron dimonio, con occhi di bragia
    3   * loro accennando, tutte le raccoglie;
    4:  * batte col remo qualunque s'adagia 
    5   *
    6   * Charon the demon, with the eyes of glede,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/iconv-lite/encodings/sbcs-data-generated.js:
   56    "windows874": {
   57      "type": "_sbcs",
   58:     "chars": "€����…�����������''“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
   59    },
   60    "win874": "windows874",
   ..
   62    "windows1250": {
   63      "type": "_sbcs",
   64:     "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�''“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
   65    },
   66    "win1250": "windows1250",
   ..
   68    "windows1251": {
   69      "type": "_sbcs",
   70:     "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ''“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
   71    },
   72    "win1251": "windows1251",
   ..
   74    "windows1252": {
   75      "type": "_sbcs",
   76:     "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��''“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
   77    },
   78    "win1252": "windows1252",
   ..
   80    "windows1253": {
   81      "type": "_sbcs",
   82:     "chars": "€�‚ƒ„…†‡�‰�‹�����''“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
   83    },
   84    "win1253": "windows1253",
   ..
   86    "windows1254": {
   87      "type": "_sbcs",
   88:     "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����''“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
   89    },
   90    "win1254": "windows1254",
   ..
   92    "windows1255": {
   93      "type": "_sbcs",
   94:     "chars": "€�‚ƒ„…†‡ˆ‰�‹�����''“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
   95    },
   96    "win1255": "windows1255",
   ..
   98    "windows1256": {
   99      "type": "_sbcs",
  100:     "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ''“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
  101    },
  102    "win1256": "windows1256",
  ...
  104    "windows1257": {
  105      "type": "_sbcs",
  106:     "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�''“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
  107    },
  108    "win1257": "windows1257",
  ...
  110    "windows1258": {
  111      "type": "_sbcs",
  112:     "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����''“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  113    },
  114    "win1258": "windows1258",
  ...
  146    "iso88597": {
  147      "type": "_sbcs",
  148:     "chars": " ''£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
  149    },
  150    "cp28597": "iso88597",
  ...
  171    "iso885913": {
  172      "type": "_sbcs",
  173:     "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž'"
  174    },
  175    "cp28603": "iso885913",
  ...
  203    "cp775": {
  204      "type": "_sbcs",
  205:     "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ'­±“¾¶§÷„°∙·¹³²■ "
  206    },
  207    "ibm775": "cp775",
  ...
  287    "cp869": {
  288      "type": "_sbcs",
  289:     "chars": "������Ά�·¬¦''Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
  290    },
  291    "ibm869": "cp869",
  ...
  335    "cp1162": {
  336      "type": "_sbcs",
  337:     "chars": "€…''“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  338    },
  339    "ibm1162": "cp1162",
  ...
  347    "maccroatian": {
  348      "type": "_sbcs",
  349:     "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”''÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
  350    },
  351    "maccyrillic": {
  352      "type": "_sbcs",
  353:     "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”''÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  354    },
  355    "macgreek": {
  356      "type": "_sbcs",
  357:     "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”''÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
  358    },
  359    "maciceland": {
  360      "type": "_sbcs",
  361:     "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”''÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  362    },
  363    "macroman": {
  364      "type": "_sbcs",
  365:     "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”''÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  366    },
  367    "macromania": {
  368      "type": "_sbcs",
  369:     "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”''÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  370    },
  371    "macthai": {
  372      "type": "_sbcs",
  373:     "chars": "«»…“”�•''� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
  374    },
  375    "macturkish": {
  376      "type": "_sbcs",
  377:     "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”''÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
  378    },
  379    "macukraine": {
  380      "type": "_sbcs",
  381:     "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”''÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  382    },
  383    "koi8r": {
  ...
  395    "koi8t": {
  396      "type": "_sbcs",
  397:     "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ''“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  398    },
  399    "armscii8": {
  ...
  403    "rk1048": {
  404      "type": "_sbcs",
  405:     "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ''“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  406    },
  407    "tcvn": {
  ...
  411    "georgianacademy": {
  412      "type": "_sbcs",
  413:     "chars": "‚ƒ„…†‡ˆ‰Š‹Œ''“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  414    },
  415    "georgianps": {
  416      "type": "_sbcs",
  417:     "chars": "‚ƒ„…†‡ˆ‰Š‹Œ''“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  418    },
  419    "pt154": {
  420      "type": "_sbcs",
  421:     "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ''“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  422    },
  423    "viscii": {
  ...
  439    "macintosh": {
  440      "type": "_sbcs",
  441:     "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”''÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  442    },
  443    "ascii": {

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/iconv-lite/encodings/sbcs-data.js:
    8      "maccenteuro": {
    9          "type": "_sbcs",
   10:         "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”''÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
   11      },
   12  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/iconv-lite/encodings/tables/cp936.json:
   65  ["a040","燖",9,"燡燢燣燤燦燨",5,"燯",9,"燺",11,"爇",19],
   66  ["a080","爛爜爞",9,"爩爫爭爮爯爲爳爴爺爼爾牀",6,"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",4,"犌犎犐犑犓",11,"犠",11,"犮犱犲犳犵犺",6,"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],
   67: ["a1a1","　、。·ˉˇ¨〃々—～‖…''“”〔〕〈",7,"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],
   68  ["a2a1","ⅰ",9],
   69  ["a2b1","⒈",19,"⑴",19,"①",9],

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/iconv-lite/encodings/tables/cp949.json:
   99  ["a141","좥좦좧좩",18,"좾좿죀죁"],
  100  ["a161","죂죃죅죆죇죉죊죋죍",6,"죖죘죚",5,"죢죣죥"],
  101: ["a181","죦",14,"죶",5,"죾죿줁줂줃줇",4,"줎　、。·‥…¨〃­―∥＼∼''“”〔〕〈",9,"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],
  102  ["a241","줐줒",5,"줙",18],
  103  ["a261","줭",6,"줵",18],

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/iconv-lite/encodings/tables/cp950.json:
    2  ["0","\u0000",127],
    3  ["a140","　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],
    4: ["a1a1","﹛﹜﹝﹞''“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",4,"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],
    5  ["a240","＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",7,"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],
    6  ["a2a1","╮╰╯═╞╪╡◢◣◥◤╱╲╳０",9,"Ⅰ",9,"〡",8,"十卄卅Ａ",25,"ａ",21],

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/iconv-lite/encodings/tables/eucjp.json:
    2  ["0","\u0000",127],
    3  ["8ea1","｡",62],
    4: ["a1a1","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥''“”（）〔〕［］｛｝〈",9,"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],
    5  ["a2a1","◆□■△▲▽▼※〒→←↑↓〓"],
    6  ["a2ba","∈∋⊆⊇⊂⊃∪∩"],

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/iconv-lite/encodings/tables/shiftjis.json:
    2  ["0","\u0000",128],
    3  ["a1","｡",62],
    4: ["8140","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥''“”（）〔〕［］｛｝〈",9,"＋－±×"],
    5  ["8180","÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],
    6  ["81b8","∈∋⊆⊇⊂⊃∪∩"],

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/CHANGELOG.md:
   21  
   22  ## 6.0.12
   23: * Don't copy `*` hack to declaration indent.
   24  
   25  ## 6.0.11
   ..
   63  * Remove deprecated method from PostCSS 4.
   64  * Insert methods remove child from previous parent, instead of closing.
   65: * Insert methods and cloning doesn't clean `raws` anymore.
   66  * Methods `moveTo`, `moveAfter`, `moveBefore` were deprecated.
   67  * Options was changed in `Plugin#process(css, processOptions, pluginOptions)`.
   ..
  152  * Add declaration value type check in shortcut creating (by 刘祺).
  153  * `Result#warn` now returns new created warning.
  154: * Don't call plugin creator in `postcss.plugin` call.
  155  * Add source maps to PostCSS ES5 build.
  156  * Add JSDoc to PostCSS classes.
  ...
  494  
  495  ## 0.3.3
  496: * Remove source map hacks by using new Mozilla's `source-map` (by Simon Lydell).
  497  
  498  ## 0.3.2
  ...
  517  * Add `selectors` shortcut to get selectors array.
  518  * Add `toResult` method to `Rule` to simplify work with several input files.
  519: * Clean declaration's `value`, rule's `selector` and at-rule's `params`
  520    by storing spaces in `between` property.
  521  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/docs/guidelines/plugin.md:
    6  The rules below are *mandatory* for all PostCSS plugins.
    7  
    8: See also [ClojureWerkz's recommendations] for open source projects.
    9  
   10: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   11  
   12  ## 1. API
   ..
   14  ### 1.1 Clear name with `postcss-` prefix
   15  
   16: The plugin's purpose should be clear just by reading its name.
   17  If you wrote a transpiler for CSS 4 Custom Media, `postcss-custom-media`
   18  would be a good name. If you wrote a plugin to support mixins,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/docs/guidelines/runner.md:
    8  these rules are not mandatory but are highly recommended.
    9  
   10: See also [ClojureWerkz's recommendations] for open source projects.
   11  
   12: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   13  [`gulp-autoprefixer`]: https://github.com/sindresorhus/gulp-autoprefixer
   14  [`gulp‑postcss`]:      https://github.com/w0rm/gulp-postcss
   ..
   51  PostCSS runners must use only the asynchronous API.
   52  The synchronous API is provided only for debugging, is slower,
   53: and can't work with asynchronous plugins.
   54  
   55  ```js
   ..
   69  ## 3. Output
   70  
   71: ### 3.1. Don't show JS stack for `CssSyntaxError`
   72  
   73  PostCSS runners must not show a stack trace for CSS syntax errors,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/docs/source-maps.md:
   10  To generate a new source map with the default options, simply set `map: true`.
   11  This will generate an inline source map that contains the source content.
   12: If you don't want the map inlined, you can set `map.inline: false`.
   13  
   14  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/docs/syntax.md:
    9  There are 3 types of PostCSS syntax packages:
   10  
   11: * **Parser** to parse input string to node's tree.
   12: * **Stringifier** to generate output string by node's tree.
   13  * **Syntax** contains both parser and stringifier.
   14  
   ..
  160  
  161  The Stringifier API is little bit more complicated, than the parser API.
  162: PostCSS generates a source map, so a stringifier can't just return a string.
  163  It must link every substring with its source node.
  164  
  165  A Stringifier is a function which receives [`Root`] node and builder callback.
  166: Then it calls builder with every node's string and node instance.
  167  
  168  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/at-rule.js:
   18   * Represents an at-rule.
   19   *
   20:  * If it's followed in the CSS by a {} block, this node will have
   21   * a nodes property representing its children.
   22   *
   ..
   71    /**
   72     * @memberof AtRule#
   73:    * @member {string} name - the at-rule's name immediately follows the `@`
   74     *
   75     * @example
   ..
   81    /**
   82     * @memberof AtRule#
   83:    * @member {string} params - the at-rule's parameters, the values
   84:    *                           that follow the at-rule's name but precede
   85     *                           any {} block
   86     *
   ..
  112     * PostCSS cleans at-rule parameters from comments and extra spaces,
  113     * but it stores origin content in raws properties.
  114:    * As such, if you don't change a declaration's value,
  115     * PostCSS will use the raw value with comments.
  116     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/comment.js:
   37    /**
   38     * @memberof Comment#
   39:    * @member {string} text - the comment's text
   40     */
   41  
   ..
   49     *
   50     * * `before`: the space symbols before the node.
   51:    * * `left`: the space symbols between `/*` and the comment's text.
   52:    * * `right`: the space symbols between the comment's text.
   53     */
   54  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/container.js:
   60  
   61      /**
   62:      * Iterates through the container's immediate children,
   63       * calling `callback` for each child.
   64       *
   65       * Returning `false` in the callback will break iteration.
   66       *
   67:      * This method only iterates through the container's immediate children.
   68:      * If you need to recursively iterate through all the container's descendant
   69       * nodes, use {@link Container#walk}.
   70       *
   ..
  120  
  121      /**
  122:      * Traverses the container's descendant nodes, calling callback
  123       * for each node.
  124       *
  ...
  126       * if you are mutating arrays during iteration.
  127       *
  128:      * If you only need to iterate through the container's immediate children,
  129       * use {@link Container#each}.
  130       *
  ...
  151  
  152      /**
  153:      * Traverses the container's descendant nodes, calling callback
  154       * for each declaration node.
  155       *
  ...
  205  
  206      /**
  207:      * Traverses the container's descendant nodes, calling callback
  208       * for each rule node.
  209       *
  ...
  254  
  255      /**
  256:      * Traverses the container's descendant nodes, calling callback
  257       * for each at-rule node.
  258       *
  ...
  309  
  310      /**
  311:      * Traverses the container's descendant nodes, calling callback
  312       * for each comment node.
  313       *
  ...
  483       * Insert new node before old node within the container.
  484       *
  485:      * @param {Node|number} exist             - child or child's index.
  486       * @param {Node|object|string|Node[]} add - new node
  487       *
  ...
  526       * Insert new node after old node within the container.
  527       *
  528:      * @param {Node|number} exist             - child or child's index
  529       * @param {Node|object|string|Node[]} add - new node
  530       *
  ...
  566       * from the node and its children.
  567       *
  568:      * @param {Node|number} child - child or child's index
  569       *
  570       * @return {Node} this node for methods chain
  ...
  636       * @param {object} opts                - options to speed up the search
  637       * @param {string|string[]} opts.props - an array of property names
  638:      * @param {string} opts.fast           - string that's used
  639       *                                       to narrow down values and speed up
  640                                               the regexp search
  ...
  674      /**
  675       * Returns `true` if callback returns `true`
  676:      * for all of the container's children.
  677       *
  678       * @param {childCondition} condition - iterator returns true or false.
  ...
  691      /**
  692       * Returns `true` if callback returns `true` for (at least) one
  693:      * of the container's children.
  694       *
  695       * @param {childCondition} condition - iterator returns true or false.
  ...
  707  
  708      /**
  709:      * Returns a `child`'s index within the {@link Container#nodes} array.
  710       *
  711       * @param {Node} child - child of the current container.
  ...
  727  
  728      /**
  729:      * The container's first child.
  730       *
  731       * @type {Node}
  ...
  851      /**
  852       * @memberof Container#
  853:      * @member {Node[]} nodes - an array containing the container's children
  854       *
  855       * @example
  ...
  868  
  869          /**
  870:          * The container's last child.
  871           *
  872           * @type {Node}

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/declaration.js:
   40    /**
   41     * @memberof Declaration#
   42:    * @member {string} prop - the declaration's property name
   43     *
   44     * @example
   ..
   50    /**
   51     * @memberof Declaration#
   52:    * @member {string} value - the declaration's value
   53     *
   54     * @example
   ..
   86     * PostCSS cleans declaration from comments and extra spaces,
   87     * but it stores origin content in raws properties.
   88:    * As such, if you don't change a declaration's value,
   89     * PostCSS will use the raw value with comments.
   90     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/node.js:
   90       * @param {string} opts.plugin - plugin name that created this error.
   91       *                               PostCSS will set it automatically.
   92:      * @param {string} opts.word   - a word inside a node's string that should
   93       *                               be highlighted as the source of the error
   94:      * @param {number} opts.index  - an index inside a node's string that should
   95       *                               be highlighted as the source of the error
   96       *
   ..
  129       * @param {string} opts.plugin - plugin name that created this warning.
  130       *                               PostCSS will set it automatically.
  131:      * @param {string} opts.word   - a word inside a node's string that should
  132       *                               be highlighted as the source of the warning
  133:      * @param {number} opts.index  - an index inside a node's string that should
  134       *                               be highlighted as the source of the warning
  135       *
  ...
  334  
  335      /**
  336:      * Returns the next child of the node's parent.
  337       * Returns `undefined` if the current node is the last child.
  338       *
  ...
  355  
  356      /**
  357:      * Returns the previous child of the node's parent.
  358       * Returns `undefined` if the current node is the first child.
  359       *
  ...
  374  
  375      /**
  376:      * Insert new node before current node to current node's parent.
  377       *
  378       * Just alias for `node.parent.insertBefore(node, add)`.
  ...
  393  
  394      /**
  395:      * Insert new node after current node to current node's parent.
  396       *
  397       * Just alias for `node.parent.insertAfter(node, add)`.
  ...
  463  
  464      /**
  465:      * Finds the Root instance of the node's tree.
  466       *
  467       * @example
  ...
  515      /**
  516       * @memberof Node#
  517:      * @member {string} type - String representing the node's type.
  518       *                         Possible values are `root`, `atrule`, `rule`,
  519       *                         `decl`, or `comment`.
  ...
  525      /**
  526       * @memberof Node#
  527:      * @member {Container} parent - the node's parent node.
  528       *
  529       * @example
  ...
  540       * that node will not have a `source` property and will be absent
  541       * from the source map. For this reason, the plugin developer should
  542:      * consider cloning nodes to create new ones (in which case the new node's
  543       * source will reference the original, cloned node) or setting
  544       * the `source` property manually.
  ...
  586       *   an (optional) semicolon.
  587       * * `afterName`: the space between the at-rule name and its parameters.
  588:      * * `left`: the space symbols between `/*` and the comment's text.
  589:      * * `right`: the space symbols between the comment's text
  590       *   and <code>*&#47;</code>.
  591       * * `important`: the content of the important statement,
  ...
  594       * PostCSS cleans selectors, declaration values and at-rule parameters
  595       * from comments and extra spaces, but it stores origin content in raws
  596:      * properties. As such, if you don't change a declaration's value,
  597       * PostCSS will use the raw value with comments.
  598       *
  ...
  616   * @typedef {object} source
  617   * @property {Input} input    - {@link Input} with input file
  618:  * @property {position} start - The starting position of the node's source
  619:  * @property {position} end   - The ending position of the node's source
  620   */
  621  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/postcss.d.ts:
  667          prev(): ChildNode | void;
  668  		/**
  669: 		 * Insert new node before current node to current node's parent.
  670  		 * 
  671  		 * Just an alias for `node.parent.insertBefore(node, newNode)`.
  ...
  678  		before(newNode: Node | object | string | Node[]): this;
  679  		/**
  680: 		 * Insert new node after current node to current node's parent.
  681  		 * 
  682  		 * Just an alias for `node.parent.insertAfter(node, newNode)`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/postcss.js:
  173   *
  174   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  175:  * @param {builder} builder - function to concatenate CSS from node's parts
  176   *                            or generate string and source map
  177   *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/processor.js:
   90    /**
   91     * Parses source CSS and returns a {@link LazyResult} Promise proxy.
   92:    * Because some plugins can be asynchronous it doesn't make
   93     * any transformations. Transformations will be applied
   94     * in the {@link LazyResult} methods.
   ..
  158   * @param {string} part          - part of generated CSS connected to this node
  159   * @param {Node}   node          - AST node
  160:  * @param {"start"|"end"} [type] - node's part type
  161   */
  162  
  ...
  175   *
  176   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  177:  * @param {builder} builder - function to concatenate CSS from node's parts
  178   *                            or generate string and source map
  179   *
  ...
  209   *                                       because it is used in source map
  210   *                                       generation and syntax error messages.
  211:  * @property {string} to               - the path where you'll put the output
  212   *                                       CSS file. You should always set `to`
  213   *                                       to generate correct source maps.
  ...
  233   * @property {string|false} map.annotation           - does PostCSS should set
  234   *                                                     annotation comment to map
  235:  * @property {string} map.from                       - override `from` in map's
  236   *                                                     `sources`
  237   */

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/root.js:
   82  
   83      /**
   84:      * Returns a {@link Result} instance representing the root's CSS.
   85       *
   86       * @param {processOptions} [opts] - options with only `to` and `map` keys
   87       *
   88:      * @return {Result} result with current root's CSS
   89       *
   90       * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/rule.js:
   46  
   47    /**
   48:    * An array containing the rule's individual selectors.
   49     * Groups of selectors are split at commas.
   50     *
   ..
   76      /**
   77       * @memberof Rule#
   78:      * @member {string} selector - the rule's full selector represented
   79       *                             as a string
   80       *
   ..
  106       * PostCSS cleans selectors from comments and extra spaces,
  107       * but it stores origin content in raws properties.
  108:      * As such, if you don't change a declaration's value,
  109       * PostCSS will use the raw value with comments.
  110       *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/lib/warning.js:
    6  
    7  /**
    8:  * Represents a plugin's warning. It can be created using {@link Node#warn}.
    9   *
   10   * @example
   ..
   52        /**
   53         * @member {number} - Line in the input file
   54:        *                    with this warning's source
   55         *
   56         * @example
   ..
   60        /**
   61         * @member {number} - Column in the input file
   62:        *                    with this warning's source.
   63         *
   64         * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/icss-utils/node_modules/postcss/README.md:
    2  
    3  <img align="right" width="95" height="95"
    4:      alt="Philosopher's stone, logo of PostCSS"
    5       src="http://postcss.github.io/postcss/logo.svg">
    6  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/is-callable/CHANGELOG.md:
    1  1.1.3 / 2016-02-27
    2  =================
    3:   * [Fix] ensure “class “ doesn't screw up “class” detection
    4    * [Tests] up to `node` `v5.7`, `v4.3`
    5    * [Dev Deps] update to `eslint` v2, `@ljharb/eslint-config`, `jscs`
    .
    7  1.1.2 / 2016-01-15
    8  =================
    9:   * [Fix] Make sure comments don't screw up “class” detection (#4)
   10    * [Tests] up to `node` `v5.3`
   11    * [Tests] Add `parallelshell`, run both `--es-staging` and stock tests at once

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/js-tokens/README.md:
  113  ===========
  114  
  115: Tokenizing JavaScript using regexes—in fact, _one single regex_—won't be
  116: perfect. But that's not the point either.
  117  
  118  You may compare jsTokens with [esprima] by using `esprima-compare.js`.
  ...
  142  ```
  143  
  144: A human can easily understand that in the `number` line we're dealing with
  145: division, and in the `regex` line we're dealing with a regex literal. How come?
  146  Because humans can look at the whole code to put the `/` characters in context.
  147  A JavaScript regex cannot. It only sees forwards.
  ...
  171  though.
  172  
  173: First off, we have the simple cases where there's only one slash in the line:
  174  
  175  ```js
  ...
  193  ambigous cases. So only the standard `g`, `m`, `i`, `y` and `u` flags are
  194  allowed. This means that the above example will be identified as division as
  195: long as you don't rename the `e` variable to some permutation of `gmiyu` 1 to 5
  196  characters long.
  197  
  ...
  212  could sum it up as:
  213  
  214: If the end of a statement looks like a regex literal (even if it isn't), it
  215  will be treated as one. Otherwise it should work as expected (if you write sane
  216  code).

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/js-yaml/dist/js-yaml.js:
  281  // Returns true if the character can be printed without escaping.
  282  // From YAML 1.2: "any allowed characters known to be non-printable
  283: // should also be escaped. [However,] This isn't mandatory"
  284  // Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
  285  function isPrintable(c) {

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/js-yaml/lib/js-yaml/dumper.js:
  178  // Returns true if the character can be printed without escaping.
  179  // From YAML 1.2: "any allowed characters known to be non-printable
  180: // should also be escaped. [However,] This isn't mandatory"
  181  // Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
  182  function isPrintable(c) {

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/jsesc/jsesc.js:
   52  	};
   53  	var isObject = function(value) {
   54: 		// This is a very simple check, but it's good enough for what we need.
   55  		return toString.call(value) == '[object Object]';
   56  	};
   ..
  211  				if (json) {
  212  					// For some values (e.g. `undefined`, `function` objects),
  213: 					// `JSON.stringify(value)` returns `undefined` (which isn't valid
  214  					// JSON) instead of `'null'`.
  215  					return JSON.stringify(argument) || 'null';
  216  				}
  217  				return String(argument);
  218: 			} else { // it's an object
  219  				result = [];
  220  				options.wrap = true;
  ...
  251  			if (options.es6) {
  252  				first = string.charCodeAt(index);
  253: 				if ( // check if it's the start of a surrogate pair
  254  					first >= 0xD800 && first <= 0xDBFF && // high surrogate
  255  					length > index + 1 // there is a next code unit
  ...
  271  			if (!options.escapeEverything) {
  272  				if (regexWhitelist.test(character)) {
  273: 					// It's a printable ASCII character that is not `"`, `'` or `\`,
  274: 					// so don't escape it.
  275  					result += character;
  276  					continue;

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/json5/README.md:
   17  
   18  The code here is a **reference JavaScript implementation** for both Node.js
   19: and all browsers. It's based directly off of Douglas Crockford's own [JSON
   20: implementation][json_parse.js], and it's both robust and secure.
   21  
   22  
   23  ## Why
   24  
   25: JSON isn't the friendliest to *write*. Keys need to be quoted, objects and
   26: arrays can't have trailing commas, and comments aren't allowed — even though
   27  none of these are the case with regular JavaScript today.
   28  
   29: That was fine when JSON's goal was to be a great data format, but JSON's usage
   30  has expanded beyond *machines*. JSON is now used for writing [configs][ex1],
   31  [manifests][ex2], even [tests][ex3] — all by *humans*.
   ..
   37  There are other formats that are human-friendlier, like YAML, but changing
   38  from JSON to a completely different format is undesirable in many cases.
   39: JSON5's aim is to remain close to JSON and JavaScript.
   40  
   41  
   42  ## Features
   43  
   44: The following is the exact list of additions to JSON's syntax introduced by
   45  JSON5. **All of these are optional**, and **all of these come from ES5**.
   46  
   47  ### Objects
   48  
   49: - Object keys can be unquoted if they're valid [identifiers][mdn_variables].
   50    Yes, even reserved keywords (like `default`) are valid unquoted keys in ES5
   51    [[§11.1.5](http://es5.github.com/#x11.1.5), [§7.6](http://es5.github.com/#x7.6)].
   52    ([More info](https://mathiasbynens.be/notes/javascript-identifiers))
   53  
   54:   *(TODO: Unicode characters and escape sequences aren't yet supported in this
   55    implementation.)*
   56    
   ..
  119  ```
  120  
  121: This implementation's own [package.json5](package.json5) is more realistic:
  122  
  123  ```js
  ...
  166  ## Community
  167  
  168: Join the [Google Group](http://groups.google.com/group/json5) if you're
  169  interested in JSON5 news, updates, and general discussion.
  170: Don't worry, it's very low-traffic.
  171  
  172  The [GitHub wiki](https://github.com/aseemk/json5/wiki) is a good place to track
  ...
  214  keep expanding it in the future (e.g. to also output trailing commas).
  215  It supports the native [`replacer` and `space` arguments][json-stringify],
  216: as well. *(TODO: Any implemented `toJSON` methods aren't used today.)*
  217  
  218  [json-stringify]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
  ...
  221  ### Extras
  222  
  223: If you're running this on Node, you can also register a JSON5 `require()` hook
  224  to let you `require()` `.json5` files just like you can `.json` files:
  225  
  ...
  272  as cheesy as it may sound, gave me motivation and confidence that building a
  273  new parser to implement these ideas this was within my reach!
  274: This code is also modeled directly off of Doug's open-source [json_parse.js][]
  275: parser. I'm super grateful for that clean and well-documented code.
  276  
  277  [json_parse.js]: https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/less-loader/node_modules/clone/README.md:
  154  If you encounter any bugs or issues, feel free to [open an issue at
  155  github](https://github.com/pvorb/clone/issues) or send me an email to
  156: <paul@vorba.ch>. I also always like to hear from you, if you're using my code.
  157  
  158  ## License

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/less/dist/less.js:
 10391  // soon as possible.
 10392  // This is useful to prevent an error thrown in a task from stalling the event
 10393: // queue if the exception handled by Node.js's
 10394  // `process.on("uncaughtException")` or by a domain.
 10395  rawAsap.requestFlush = requestFlush;

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/less/test/data/data-uri-fail.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/less/test/data/image.jpg:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/loglevel/README.md:
  129  * A `log.setDefaultLevel(level)` method.
  130  
  131:   This sets the current log level only if one has not been persisted and can't be loaded. This is useful when initializing scripts; if a developer or user has previously called `setLevel()`, this won't alter their settings. For example, your application might set the log level to `error` in a production environment, but when debugging an issue, you might call `setLevel("trace")` on the console to see all the logs. If that `error` setting was set using `setDefaultLevel()`, it will still say as `trace` on subsequent page loads and refreshes instead of resetting to `error`.
  132  
  133    The `level` argument takes is the same values that you might pass to `setLevel()`. Levels set using `setDefaultLevel()` never persist to subsequent page loads.
  ...
  194    Loggers returned by `getLogger()` support all the same properties and methods as the default root logger, excepting `noConflict()` and the `getLogger()` method itself.
  195  
  196:   Like the root logger, other loggers can have their logging level saved. If a logger's level has not been saved, it will inherit the root logger's level when it is first created. If the root logger's level changes later, the new level will not affect other loggers that have already been created.
  197  
  198:   Likewise, loggers will inherit the root logger's `methodFactory`. After creation, each logger can have its `methodFactory` independently set. See the *plugins* section below for more about `methodFactory`.
  199  
  200  * A `log.getLoggers()` method.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/node-forge/flash/swf/SocketPool.swf:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/node-forge/lib/pkcs12.js:
   69   *   attrId ATTRIBUTE.&id ({PKCS12AttrSet}),
   70   *   attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})
   71:  * } -- This type is compatible with the X.500 type 'Attribute'
   72   *
   73   * PKCS12AttrSet ATTRIBUTE ::= {

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-convert-values/README.md:
   84  
   85  <!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
   86: | [<img src="https://avatars.githubusercontent.com/u/1282980?v=3" width="100px;"/><br /><sub>Ben Briggs</sub>](http://beneb.info)<br />[💻](https://github.com/ben-eb/postcss-convert-values/commits?author=ben-eb) [📖](https://github.com/ben-eb/postcss-convert-values/commits?author=ben-eb) 👀 [⚠️](https://github.com/ben-eb/postcss-convert-values/commits?author=ben-eb) | [<img src="https://avatars.githubusercontent.com/u/5635476?v=3" width="100px;"/><br /><sub>Bogdan Chadkin</sub>](https://github.com/TrySound)<br />[💻](https://github.com/ben-eb/postcss-convert-values/commits?author=TrySound) [📖](https://github.com/ben-eb/postcss-convert-values/commits?author=TrySound) 👀 [⚠️](https://github.com/ben-eb/postcss-convert-values/commits?author=TrySound) | [<img src="https://avatars.githubusercontent.com/u/177485?v=3" width="100px;"/><br /><sub>Roman Komarov</sub>](http://kizu.ru/en/)<br />[🐛](https://github.com/ben-eb/postcss-convert-values/issues?q=author%3Akizu) | [<img src="https://avatars.githubusercontent.com/u/5103477?v=3" width="100px;"/><br /><sub>Dmitry Kiselyov</sub>](http://codepen.io/dmitrykiselyov)<br />[🐛](https://github.com/ben-eb/postcss-convert-values/issues?q=author%3Admitrykiselyov) | [<img src="https://avatars.githubusercontent.com/u/5038030?v=3" width="100px;"/><br /><sub>Charlike Mike Reagent</sub>](http://www.tunnckocore.tk)<br />[💻](https://github.com/ben-eb/postcss-convert-values/commits?author=tunnckoCore) [⚠️](https://github.com/ben-eb/postcss-convert-values/commits?author=tunnckoCore) | [<img src="https://avatars.githubusercontent.com/u/815848?v=3" width="100px;"/><br /><sub>Vyacheslav Shebanov</sub>](https://github.com/Termina1)<br />[📖](https://github.com/ben-eb/postcss-convert-values/commits?author=Termina1) | [<img src="https://avatars.githubusercontent.com/u/192323?v=3" width="100px;"/><br /><sub>Marek 'saji' Augustynowicz</sub>](http://twitter.com/saji_)<br />[💻](https://github.com/ben-eb/postcss-convert-values/commits?author=marek-saji) [⚠️](https://github.com/ben-eb/postcss-convert-values/commits?author=marek-saji) |
   87  | :---: | :---: | :---: | :---: | :---: | :---: | :---: |
   88  | [<img src="https://avatars.githubusercontent.com/u/552316?v=3" width="100px;"/><br /><sub>Jonny Gerig Meyer</sub>](www.oddbird.net)<br />[💻](https://github.com/ben-eb/postcss-convert-values/commits?author=jgerigmeyer) [⚠️](https://github.com/ben-eb/postcss-convert-values/commits?author=jgerigmeyer) | [<img src="https://avatars.githubusercontent.com/u/1726061?v=3" width="100px;"/><br /><sub>GU Yiling</sub>](http://lync.in/)<br />[💻](https://github.com/ben-eb/postcss-convert-values/commits?author=Justineo) [⚠️](https://github.com/ben-eb/postcss-convert-values/commits?author=Justineo) |

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/CHANGELOG.md:
   21  
   22  ## 6.0.12
   23: * Don't copy `*` hack to declaration indent.
   24  
   25  ## 6.0.11
   ..
   63  * Remove deprecated method from PostCSS 4.
   64  * Insert methods remove child from previous parent, instead of closing.
   65: * Insert methods and cloning doesn't clean `raws` anymore.
   66  * Methods `moveTo`, `moveAfter`, `moveBefore` were deprecated.
   67  * Options was changed in `Plugin#process(css, processOptions, pluginOptions)`.
   ..
  152  * Add declaration value type check in shortcut creating (by 刘祺).
  153  * `Result#warn` now returns new created warning.
  154: * Don't call plugin creator in `postcss.plugin` call.
  155  * Add source maps to PostCSS ES5 build.
  156  * Add JSDoc to PostCSS classes.
  ...
  494  
  495  ## 0.3.3
  496: * Remove source map hacks by using new Mozilla's `source-map` (by Simon Lydell).
  497  
  498  ## 0.3.2
  ...
  517  * Add `selectors` shortcut to get selectors array.
  518  * Add `toResult` method to `Rule` to simplify work with several input files.
  519: * Clean declaration's `value`, rule's `selector` and at-rule's `params`
  520    by storing spaces in `between` property.
  521  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/docs/guidelines/plugin.md:
    6  The rules below are *mandatory* for all PostCSS plugins.
    7  
    8: See also [ClojureWerkz's recommendations] for open source projects.
    9  
   10: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   11  
   12  ## 1. API
   ..
   14  ### 1.1 Clear name with `postcss-` prefix
   15  
   16: The plugin's purpose should be clear just by reading its name.
   17  If you wrote a transpiler for CSS 4 Custom Media, `postcss-custom-media`
   18  would be a good name. If you wrote a plugin to support mixins,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/docs/guidelines/runner.md:
    8  these rules are not mandatory but are highly recommended.
    9  
   10: See also [ClojureWerkz's recommendations] for open source projects.
   11  
   12: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   13  [`gulp-autoprefixer`]: https://github.com/sindresorhus/gulp-autoprefixer
   14  [`gulp‑postcss`]:      https://github.com/w0rm/gulp-postcss
   ..
   51  PostCSS runners must use only the asynchronous API.
   52  The synchronous API is provided only for debugging, is slower,
   53: and can't work with asynchronous plugins.
   54  
   55  ```js
   ..
   69  ## 3. Output
   70  
   71: ### 3.1. Don't show JS stack for `CssSyntaxError`
   72  
   73  PostCSS runners must not show a stack trace for CSS syntax errors,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/docs/source-maps.md:
   10  To generate a new source map with the default options, simply set `map: true`.
   11  This will generate an inline source map that contains the source content.
   12: If you don't want the map inlined, you can set `map.inline: false`.
   13  
   14  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/docs/syntax.md:
    9  There are 3 types of PostCSS syntax packages:
   10  
   11: * **Parser** to parse input string to node's tree.
   12: * **Stringifier** to generate output string by node's tree.
   13  * **Syntax** contains both parser and stringifier.
   14  
   ..
  160  
  161  The Stringifier API is little bit more complicated, than the parser API.
  162: PostCSS generates a source map, so a stringifier can't just return a string.
  163  It must link every substring with its source node.
  164  
  165  A Stringifier is a function which receives [`Root`] node and builder callback.
  166: Then it calls builder with every node's string and node instance.
  167  
  168  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/at-rule.js:
   18   * Represents an at-rule.
   19   *
   20:  * If it's followed in the CSS by a {} block, this node will have
   21   * a nodes property representing its children.
   22   *
   ..
   71    /**
   72     * @memberof AtRule#
   73:    * @member {string} name - the at-rule's name immediately follows the `@`
   74     *
   75     * @example
   ..
   81    /**
   82     * @memberof AtRule#
   83:    * @member {string} params - the at-rule's parameters, the values
   84:    *                           that follow the at-rule's name but precede
   85     *                           any {} block
   86     *
   ..
  112     * PostCSS cleans at-rule parameters from comments and extra spaces,
  113     * but it stores origin content in raws properties.
  114:    * As such, if you don't change a declaration's value,
  115     * PostCSS will use the raw value with comments.
  116     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/comment.js:
   37    /**
   38     * @memberof Comment#
   39:    * @member {string} text - the comment's text
   40     */
   41  
   ..
   49     *
   50     * * `before`: the space symbols before the node.
   51:    * * `left`: the space symbols between `/*` and the comment's text.
   52:    * * `right`: the space symbols between the comment's text.
   53     */
   54  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/container.js:
   60  
   61      /**
   62:      * Iterates through the container's immediate children,
   63       * calling `callback` for each child.
   64       *
   65       * Returning `false` in the callback will break iteration.
   66       *
   67:      * This method only iterates through the container's immediate children.
   68:      * If you need to recursively iterate through all the container's descendant
   69       * nodes, use {@link Container#walk}.
   70       *
   ..
  120  
  121      /**
  122:      * Traverses the container's descendant nodes, calling callback
  123       * for each node.
  124       *
  ...
  126       * if you are mutating arrays during iteration.
  127       *
  128:      * If you only need to iterate through the container's immediate children,
  129       * use {@link Container#each}.
  130       *
  ...
  151  
  152      /**
  153:      * Traverses the container's descendant nodes, calling callback
  154       * for each declaration node.
  155       *
  ...
  205  
  206      /**
  207:      * Traverses the container's descendant nodes, calling callback
  208       * for each rule node.
  209       *
  ...
  254  
  255      /**
  256:      * Traverses the container's descendant nodes, calling callback
  257       * for each at-rule node.
  258       *
  ...
  309  
  310      /**
  311:      * Traverses the container's descendant nodes, calling callback
  312       * for each comment node.
  313       *
  ...
  483       * Insert new node before old node within the container.
  484       *
  485:      * @param {Node|number} exist             - child or child's index.
  486       * @param {Node|object|string|Node[]} add - new node
  487       *
  ...
  526       * Insert new node after old node within the container.
  527       *
  528:      * @param {Node|number} exist             - child or child's index
  529       * @param {Node|object|string|Node[]} add - new node
  530       *
  ...
  566       * from the node and its children.
  567       *
  568:      * @param {Node|number} child - child or child's index
  569       *
  570       * @return {Node} this node for methods chain
  ...
  636       * @param {object} opts                - options to speed up the search
  637       * @param {string|string[]} opts.props - an array of property names
  638:      * @param {string} opts.fast           - string that's used
  639       *                                       to narrow down values and speed up
  640                                               the regexp search
  ...
  674      /**
  675       * Returns `true` if callback returns `true`
  676:      * for all of the container's children.
  677       *
  678       * @param {childCondition} condition - iterator returns true or false.
  ...
  691      /**
  692       * Returns `true` if callback returns `true` for (at least) one
  693:      * of the container's children.
  694       *
  695       * @param {childCondition} condition - iterator returns true or false.
  ...
  707  
  708      /**
  709:      * Returns a `child`'s index within the {@link Container#nodes} array.
  710       *
  711       * @param {Node} child - child of the current container.
  ...
  727  
  728      /**
  729:      * The container's first child.
  730       *
  731       * @type {Node}
  ...
  851      /**
  852       * @memberof Container#
  853:      * @member {Node[]} nodes - an array containing the container's children
  854       *
  855       * @example
  ...
  868  
  869          /**
  870:          * The container's last child.
  871           *
  872           * @type {Node}

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/declaration.js:
   40    /**
   41     * @memberof Declaration#
   42:    * @member {string} prop - the declaration's property name
   43     *
   44     * @example
   ..
   50    /**
   51     * @memberof Declaration#
   52:    * @member {string} value - the declaration's value
   53     *
   54     * @example
   ..
   86     * PostCSS cleans declaration from comments and extra spaces,
   87     * but it stores origin content in raws properties.
   88:    * As such, if you don't change a declaration's value,
   89     * PostCSS will use the raw value with comments.
   90     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/node.js:
   90       * @param {string} opts.plugin - plugin name that created this error.
   91       *                               PostCSS will set it automatically.
   92:      * @param {string} opts.word   - a word inside a node's string that should
   93       *                               be highlighted as the source of the error
   94:      * @param {number} opts.index  - an index inside a node's string that should
   95       *                               be highlighted as the source of the error
   96       *
   ..
  129       * @param {string} opts.plugin - plugin name that created this warning.
  130       *                               PostCSS will set it automatically.
  131:      * @param {string} opts.word   - a word inside a node's string that should
  132       *                               be highlighted as the source of the warning
  133:      * @param {number} opts.index  - an index inside a node's string that should
  134       *                               be highlighted as the source of the warning
  135       *
  ...
  334  
  335      /**
  336:      * Returns the next child of the node's parent.
  337       * Returns `undefined` if the current node is the last child.
  338       *
  ...
  355  
  356      /**
  357:      * Returns the previous child of the node's parent.
  358       * Returns `undefined` if the current node is the first child.
  359       *
  ...
  374  
  375      /**
  376:      * Insert new node before current node to current node's parent.
  377       *
  378       * Just alias for `node.parent.insertBefore(node, add)`.
  ...
  393  
  394      /**
  395:      * Insert new node after current node to current node's parent.
  396       *
  397       * Just alias for `node.parent.insertAfter(node, add)`.
  ...
  463  
  464      /**
  465:      * Finds the Root instance of the node's tree.
  466       *
  467       * @example
  ...
  515      /**
  516       * @memberof Node#
  517:      * @member {string} type - String representing the node's type.
  518       *                         Possible values are `root`, `atrule`, `rule`,
  519       *                         `decl`, or `comment`.
  ...
  525      /**
  526       * @memberof Node#
  527:      * @member {Container} parent - the node's parent node.
  528       *
  529       * @example
  ...
  540       * that node will not have a `source` property and will be absent
  541       * from the source map. For this reason, the plugin developer should
  542:      * consider cloning nodes to create new ones (in which case the new node's
  543       * source will reference the original, cloned node) or setting
  544       * the `source` property manually.
  ...
  586       *   an (optional) semicolon.
  587       * * `afterName`: the space between the at-rule name and its parameters.
  588:      * * `left`: the space symbols between `/*` and the comment's text.
  589:      * * `right`: the space symbols between the comment's text
  590       *   and <code>*&#47;</code>.
  591       * * `important`: the content of the important statement,
  ...
  594       * PostCSS cleans selectors, declaration values and at-rule parameters
  595       * from comments and extra spaces, but it stores origin content in raws
  596:      * properties. As such, if you don't change a declaration's value,
  597       * PostCSS will use the raw value with comments.
  598       *
  ...
  616   * @typedef {object} source
  617   * @property {Input} input    - {@link Input} with input file
  618:  * @property {position} start - The starting position of the node's source
  619:  * @property {position} end   - The ending position of the node's source
  620   */
  621  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/postcss.d.ts:
  667          prev(): ChildNode | void;
  668  		/**
  669: 		 * Insert new node before current node to current node's parent.
  670  		 * 
  671  		 * Just an alias for `node.parent.insertBefore(node, newNode)`.
  ...
  678  		before(newNode: Node | object | string | Node[]): this;
  679  		/**
  680: 		 * Insert new node after current node to current node's parent.
  681  		 * 
  682  		 * Just an alias for `node.parent.insertAfter(node, newNode)`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/postcss.js:
  173   *
  174   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  175:  * @param {builder} builder - function to concatenate CSS from node's parts
  176   *                            or generate string and source map
  177   *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/processor.js:
   90    /**
   91     * Parses source CSS and returns a {@link LazyResult} Promise proxy.
   92:    * Because some plugins can be asynchronous it doesn't make
   93     * any transformations. Transformations will be applied
   94     * in the {@link LazyResult} methods.
   ..
  158   * @param {string} part          - part of generated CSS connected to this node
  159   * @param {Node}   node          - AST node
  160:  * @param {"start"|"end"} [type] - node's part type
  161   */
  162  
  ...
  175   *
  176   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  177:  * @param {builder} builder - function to concatenate CSS from node's parts
  178   *                            or generate string and source map
  179   *
  ...
  209   *                                       because it is used in source map
  210   *                                       generation and syntax error messages.
  211:  * @property {string} to               - the path where you'll put the output
  212   *                                       CSS file. You should always set `to`
  213   *                                       to generate correct source maps.
  ...
  233   * @property {string|false} map.annotation           - does PostCSS should set
  234   *                                                     annotation comment to map
  235:  * @property {string} map.from                       - override `from` in map's
  236   *                                                     `sources`
  237   */

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/root.js:
   82  
   83      /**
   84:      * Returns a {@link Result} instance representing the root's CSS.
   85       *
   86       * @param {processOptions} [opts] - options with only `to` and `map` keys
   87       *
   88:      * @return {Result} result with current root's CSS
   89       *
   90       * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/rule.js:
   46  
   47    /**
   48:    * An array containing the rule's individual selectors.
   49     * Groups of selectors are split at commas.
   50     *
   ..
   76      /**
   77       * @memberof Rule#
   78:      * @member {string} selector - the rule's full selector represented
   79       *                             as a string
   80       *
   ..
  106       * PostCSS cleans selectors from comments and extra spaces,
  107       * but it stores origin content in raws properties.
  108:      * As such, if you don't change a declaration's value,
  109       * PostCSS will use the raw value with comments.
  110       *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/lib/warning.js:
    6  
    7  /**
    8:  * Represents a plugin's warning. It can be created using {@link Node#warn}.
    9   *
   10   * @example
   ..
   52        /**
   53         * @member {number} - Line in the input file
   54:        *                    with this warning's source
   55         *
   56         * @example
   ..
   60        /**
   61         * @member {number} - Column in the input file
   62:        *                    with this warning's source.
   63         *
   64         * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-extract-imports/node_modules/postcss/README.md:
    2  
    3  <img align="right" width="95" height="95"
    4:      alt="Philosopher's stone, logo of PostCSS"
    5       src="http://postcss.github.io/postcss/logo.svg">
    6  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/CHANGELOG.md:
   21  
   22  ## 6.0.12
   23: * Don't copy `*` hack to declaration indent.
   24  
   25  ## 6.0.11
   ..
   63  * Remove deprecated method from PostCSS 4.
   64  * Insert methods remove child from previous parent, instead of closing.
   65: * Insert methods and cloning doesn't clean `raws` anymore.
   66  * Methods `moveTo`, `moveAfter`, `moveBefore` were deprecated.
   67  * Options was changed in `Plugin#process(css, processOptions, pluginOptions)`.
   ..
  152  * Add declaration value type check in shortcut creating (by 刘祺).
  153  * `Result#warn` now returns new created warning.
  154: * Don't call plugin creator in `postcss.plugin` call.
  155  * Add source maps to PostCSS ES5 build.
  156  * Add JSDoc to PostCSS classes.
  ...
  494  
  495  ## 0.3.3
  496: * Remove source map hacks by using new Mozilla's `source-map` (by Simon Lydell).
  497  
  498  ## 0.3.2
  ...
  517  * Add `selectors` shortcut to get selectors array.
  518  * Add `toResult` method to `Rule` to simplify work with several input files.
  519: * Clean declaration's `value`, rule's `selector` and at-rule's `params`
  520    by storing spaces in `between` property.
  521  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/docs/guidelines/plugin.md:
    6  The rules below are *mandatory* for all PostCSS plugins.
    7  
    8: See also [ClojureWerkz's recommendations] for open source projects.
    9  
   10: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   11  
   12  ## 1. API
   ..
   14  ### 1.1 Clear name with `postcss-` prefix
   15  
   16: The plugin's purpose should be clear just by reading its name.
   17  If you wrote a transpiler for CSS 4 Custom Media, `postcss-custom-media`
   18  would be a good name. If you wrote a plugin to support mixins,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/docs/guidelines/runner.md:
    8  these rules are not mandatory but are highly recommended.
    9  
   10: See also [ClojureWerkz's recommendations] for open source projects.
   11  
   12: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   13  [`gulp-autoprefixer`]: https://github.com/sindresorhus/gulp-autoprefixer
   14  [`gulp‑postcss`]:      https://github.com/w0rm/gulp-postcss
   ..
   51  PostCSS runners must use only the asynchronous API.
   52  The synchronous API is provided only for debugging, is slower,
   53: and can't work with asynchronous plugins.
   54  
   55  ```js
   ..
   69  ## 3. Output
   70  
   71: ### 3.1. Don't show JS stack for `CssSyntaxError`
   72  
   73  PostCSS runners must not show a stack trace for CSS syntax errors,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/docs/source-maps.md:
   10  To generate a new source map with the default options, simply set `map: true`.
   11  This will generate an inline source map that contains the source content.
   12: If you don't want the map inlined, you can set `map.inline: false`.
   13  
   14  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/docs/syntax.md:
    9  There are 3 types of PostCSS syntax packages:
   10  
   11: * **Parser** to parse input string to node's tree.
   12: * **Stringifier** to generate output string by node's tree.
   13  * **Syntax** contains both parser and stringifier.
   14  
   ..
  160  
  161  The Stringifier API is little bit more complicated, than the parser API.
  162: PostCSS generates a source map, so a stringifier can't just return a string.
  163  It must link every substring with its source node.
  164  
  165  A Stringifier is a function which receives [`Root`] node and builder callback.
  166: Then it calls builder with every node's string and node instance.
  167  
  168  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/at-rule.js:
   18   * Represents an at-rule.
   19   *
   20:  * If it's followed in the CSS by a {} block, this node will have
   21   * a nodes property representing its children.
   22   *
   ..
   71    /**
   72     * @memberof AtRule#
   73:    * @member {string} name - the at-rule's name immediately follows the `@`
   74     *
   75     * @example
   ..
   81    /**
   82     * @memberof AtRule#
   83:    * @member {string} params - the at-rule's parameters, the values
   84:    *                           that follow the at-rule's name but precede
   85     *                           any {} block
   86     *
   ..
  112     * PostCSS cleans at-rule parameters from comments and extra spaces,
  113     * but it stores origin content in raws properties.
  114:    * As such, if you don't change a declaration's value,
  115     * PostCSS will use the raw value with comments.
  116     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/comment.js:
   37    /**
   38     * @memberof Comment#
   39:    * @member {string} text - the comment's text
   40     */
   41  
   ..
   49     *
   50     * * `before`: the space symbols before the node.
   51:    * * `left`: the space symbols between `/*` and the comment's text.
   52:    * * `right`: the space symbols between the comment's text.
   53     */
   54  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/container.js:
   60  
   61      /**
   62:      * Iterates through the container's immediate children,
   63       * calling `callback` for each child.
   64       *
   65       * Returning `false` in the callback will break iteration.
   66       *
   67:      * This method only iterates through the container's immediate children.
   68:      * If you need to recursively iterate through all the container's descendant
   69       * nodes, use {@link Container#walk}.
   70       *
   ..
  120  
  121      /**
  122:      * Traverses the container's descendant nodes, calling callback
  123       * for each node.
  124       *
  ...
  126       * if you are mutating arrays during iteration.
  127       *
  128:      * If you only need to iterate through the container's immediate children,
  129       * use {@link Container#each}.
  130       *
  ...
  151  
  152      /**
  153:      * Traverses the container's descendant nodes, calling callback
  154       * for each declaration node.
  155       *
  ...
  205  
  206      /**
  207:      * Traverses the container's descendant nodes, calling callback
  208       * for each rule node.
  209       *
  ...
  254  
  255      /**
  256:      * Traverses the container's descendant nodes, calling callback
  257       * for each at-rule node.
  258       *
  ...
  309  
  310      /**
  311:      * Traverses the container's descendant nodes, calling callback
  312       * for each comment node.
  313       *
  ...
  483       * Insert new node before old node within the container.
  484       *
  485:      * @param {Node|number} exist             - child or child's index.
  486       * @param {Node|object|string|Node[]} add - new node
  487       *
  ...
  526       * Insert new node after old node within the container.
  527       *
  528:      * @param {Node|number} exist             - child or child's index
  529       * @param {Node|object|string|Node[]} add - new node
  530       *
  ...
  566       * from the node and its children.
  567       *
  568:      * @param {Node|number} child - child or child's index
  569       *
  570       * @return {Node} this node for methods chain
  ...
  636       * @param {object} opts                - options to speed up the search
  637       * @param {string|string[]} opts.props - an array of property names
  638:      * @param {string} opts.fast           - string that's used
  639       *                                       to narrow down values and speed up
  640                                               the regexp search
  ...
  674      /**
  675       * Returns `true` if callback returns `true`
  676:      * for all of the container's children.
  677       *
  678       * @param {childCondition} condition - iterator returns true or false.
  ...
  691      /**
  692       * Returns `true` if callback returns `true` for (at least) one
  693:      * of the container's children.
  694       *
  695       * @param {childCondition} condition - iterator returns true or false.
  ...
  707  
  708      /**
  709:      * Returns a `child`'s index within the {@link Container#nodes} array.
  710       *
  711       * @param {Node} child - child of the current container.
  ...
  727  
  728      /**
  729:      * The container's first child.
  730       *
  731       * @type {Node}
  ...
  851      /**
  852       * @memberof Container#
  853:      * @member {Node[]} nodes - an array containing the container's children
  854       *
  855       * @example
  ...
  868  
  869          /**
  870:          * The container's last child.
  871           *
  872           * @type {Node}

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/declaration.js:
   40    /**
   41     * @memberof Declaration#
   42:    * @member {string} prop - the declaration's property name
   43     *
   44     * @example
   ..
   50    /**
   51     * @memberof Declaration#
   52:    * @member {string} value - the declaration's value
   53     *
   54     * @example
   ..
   86     * PostCSS cleans declaration from comments and extra spaces,
   87     * but it stores origin content in raws properties.
   88:    * As such, if you don't change a declaration's value,
   89     * PostCSS will use the raw value with comments.
   90     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/node.js:
   90       * @param {string} opts.plugin - plugin name that created this error.
   91       *                               PostCSS will set it automatically.
   92:      * @param {string} opts.word   - a word inside a node's string that should
   93       *                               be highlighted as the source of the error
   94:      * @param {number} opts.index  - an index inside a node's string that should
   95       *                               be highlighted as the source of the error
   96       *
   ..
  129       * @param {string} opts.plugin - plugin name that created this warning.
  130       *                               PostCSS will set it automatically.
  131:      * @param {string} opts.word   - a word inside a node's string that should
  132       *                               be highlighted as the source of the warning
  133:      * @param {number} opts.index  - an index inside a node's string that should
  134       *                               be highlighted as the source of the warning
  135       *
  ...
  334  
  335      /**
  336:      * Returns the next child of the node's parent.
  337       * Returns `undefined` if the current node is the last child.
  338       *
  ...
  355  
  356      /**
  357:      * Returns the previous child of the node's parent.
  358       * Returns `undefined` if the current node is the first child.
  359       *
  ...
  374  
  375      /**
  376:      * Insert new node before current node to current node's parent.
  377       *
  378       * Just alias for `node.parent.insertBefore(node, add)`.
  ...
  393  
  394      /**
  395:      * Insert new node after current node to current node's parent.
  396       *
  397       * Just alias for `node.parent.insertAfter(node, add)`.
  ...
  463  
  464      /**
  465:      * Finds the Root instance of the node's tree.
  466       *
  467       * @example
  ...
  515      /**
  516       * @memberof Node#
  517:      * @member {string} type - String representing the node's type.
  518       *                         Possible values are `root`, `atrule`, `rule`,
  519       *                         `decl`, or `comment`.
  ...
  525      /**
  526       * @memberof Node#
  527:      * @member {Container} parent - the node's parent node.
  528       *
  529       * @example
  ...
  540       * that node will not have a `source` property and will be absent
  541       * from the source map. For this reason, the plugin developer should
  542:      * consider cloning nodes to create new ones (in which case the new node's
  543       * source will reference the original, cloned node) or setting
  544       * the `source` property manually.
  ...
  586       *   an (optional) semicolon.
  587       * * `afterName`: the space between the at-rule name and its parameters.
  588:      * * `left`: the space symbols between `/*` and the comment's text.
  589:      * * `right`: the space symbols between the comment's text
  590       *   and <code>*&#47;</code>.
  591       * * `important`: the content of the important statement,
  ...
  594       * PostCSS cleans selectors, declaration values and at-rule parameters
  595       * from comments and extra spaces, but it stores origin content in raws
  596:      * properties. As such, if you don't change a declaration's value,
  597       * PostCSS will use the raw value with comments.
  598       *
  ...
  616   * @typedef {object} source
  617   * @property {Input} input    - {@link Input} with input file
  618:  * @property {position} start - The starting position of the node's source
  619:  * @property {position} end   - The ending position of the node's source
  620   */
  621  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/postcss.d.ts:
  667          prev(): ChildNode | void;
  668  		/**
  669: 		 * Insert new node before current node to current node's parent.
  670  		 * 
  671  		 * Just an alias for `node.parent.insertBefore(node, newNode)`.
  ...
  678  		before(newNode: Node | object | string | Node[]): this;
  679  		/**
  680: 		 * Insert new node after current node to current node's parent.
  681  		 * 
  682  		 * Just an alias for `node.parent.insertAfter(node, newNode)`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/postcss.js:
  173   *
  174   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  175:  * @param {builder} builder - function to concatenate CSS from node's parts
  176   *                            or generate string and source map
  177   *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/processor.js:
   90    /**
   91     * Parses source CSS and returns a {@link LazyResult} Promise proxy.
   92:    * Because some plugins can be asynchronous it doesn't make
   93     * any transformations. Transformations will be applied
   94     * in the {@link LazyResult} methods.
   ..
  158   * @param {string} part          - part of generated CSS connected to this node
  159   * @param {Node}   node          - AST node
  160:  * @param {"start"|"end"} [type] - node's part type
  161   */
  162  
  ...
  175   *
  176   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  177:  * @param {builder} builder - function to concatenate CSS from node's parts
  178   *                            or generate string and source map
  179   *
  ...
  209   *                                       because it is used in source map
  210   *                                       generation and syntax error messages.
  211:  * @property {string} to               - the path where you'll put the output
  212   *                                       CSS file. You should always set `to`
  213   *                                       to generate correct source maps.
  ...
  233   * @property {string|false} map.annotation           - does PostCSS should set
  234   *                                                     annotation comment to map
  235:  * @property {string} map.from                       - override `from` in map's
  236   *                                                     `sources`
  237   */

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/root.js:
   82  
   83      /**
   84:      * Returns a {@link Result} instance representing the root's CSS.
   85       *
   86       * @param {processOptions} [opts] - options with only `to` and `map` keys
   87       *
   88:      * @return {Result} result with current root's CSS
   89       *
   90       * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/rule.js:
   46  
   47    /**
   48:    * An array containing the rule's individual selectors.
   49     * Groups of selectors are split at commas.
   50     *
   ..
   76      /**
   77       * @memberof Rule#
   78:      * @member {string} selector - the rule's full selector represented
   79       *                             as a string
   80       *
   ..
  106       * PostCSS cleans selectors from comments and extra spaces,
  107       * but it stores origin content in raws properties.
  108:      * As such, if you don't change a declaration's value,
  109       * PostCSS will use the raw value with comments.
  110       *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/lib/warning.js:
    6  
    7  /**
    8:  * Represents a plugin's warning. It can be created using {@link Node#warn}.
    9   *
   10   * @example
   ..
   52        /**
   53         * @member {number} - Line in the input file
   54:        *                    with this warning's source
   55         *
   56         * @example
   ..
   60        /**
   61         * @member {number} - Column in the input file
   62:        *                    with this warning's source.
   63         *
   64         * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-local-by-default/node_modules/postcss/README.md:
    2  
    3  <img align="right" width="95" height="95"
    4:      alt="Philosopher's stone, logo of PostCSS"
    5       src="http://postcss.github.io/postcss/logo.svg">
    6  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/CHANGELOG.md:
   21  
   22  ## 6.0.12
   23: * Don't copy `*` hack to declaration indent.
   24  
   25  ## 6.0.11
   ..
   63  * Remove deprecated method from PostCSS 4.
   64  * Insert methods remove child from previous parent, instead of closing.
   65: * Insert methods and cloning doesn't clean `raws` anymore.
   66  * Methods `moveTo`, `moveAfter`, `moveBefore` were deprecated.
   67  * Options was changed in `Plugin#process(css, processOptions, pluginOptions)`.
   ..
  152  * Add declaration value type check in shortcut creating (by 刘祺).
  153  * `Result#warn` now returns new created warning.
  154: * Don't call plugin creator in `postcss.plugin` call.
  155  * Add source maps to PostCSS ES5 build.
  156  * Add JSDoc to PostCSS classes.
  ...
  494  
  495  ## 0.3.3
  496: * Remove source map hacks by using new Mozilla's `source-map` (by Simon Lydell).
  497  
  498  ## 0.3.2
  ...
  517  * Add `selectors` shortcut to get selectors array.
  518  * Add `toResult` method to `Rule` to simplify work with several input files.
  519: * Clean declaration's `value`, rule's `selector` and at-rule's `params`
  520    by storing spaces in `between` property.
  521  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/docs/guidelines/plugin.md:
    6  The rules below are *mandatory* for all PostCSS plugins.
    7  
    8: See also [ClojureWerkz's recommendations] for open source projects.
    9  
   10: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   11  
   12  ## 1. API
   ..
   14  ### 1.1 Clear name with `postcss-` prefix
   15  
   16: The plugin's purpose should be clear just by reading its name.
   17  If you wrote a transpiler for CSS 4 Custom Media, `postcss-custom-media`
   18  would be a good name. If you wrote a plugin to support mixins,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/docs/guidelines/runner.md:
    8  these rules are not mandatory but are highly recommended.
    9  
   10: See also [ClojureWerkz's recommendations] for open source projects.
   11  
   12: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   13  [`gulp-autoprefixer`]: https://github.com/sindresorhus/gulp-autoprefixer
   14  [`gulp‑postcss`]:      https://github.com/w0rm/gulp-postcss
   ..
   51  PostCSS runners must use only the asynchronous API.
   52  The synchronous API is provided only for debugging, is slower,
   53: and can't work with asynchronous plugins.
   54  
   55  ```js
   ..
   69  ## 3. Output
   70  
   71: ### 3.1. Don't show JS stack for `CssSyntaxError`
   72  
   73  PostCSS runners must not show a stack trace for CSS syntax errors,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/docs/source-maps.md:
   10  To generate a new source map with the default options, simply set `map: true`.
   11  This will generate an inline source map that contains the source content.
   12: If you don't want the map inlined, you can set `map.inline: false`.
   13  
   14  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/docs/syntax.md:
    9  There are 3 types of PostCSS syntax packages:
   10  
   11: * **Parser** to parse input string to node's tree.
   12: * **Stringifier** to generate output string by node's tree.
   13  * **Syntax** contains both parser and stringifier.
   14  
   ..
  160  
  161  The Stringifier API is little bit more complicated, than the parser API.
  162: PostCSS generates a source map, so a stringifier can't just return a string.
  163  It must link every substring with its source node.
  164  
  165  A Stringifier is a function which receives [`Root`] node and builder callback.
  166: Then it calls builder with every node's string and node instance.
  167  
  168  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/at-rule.js:
   18   * Represents an at-rule.
   19   *
   20:  * If it's followed in the CSS by a {} block, this node will have
   21   * a nodes property representing its children.
   22   *
   ..
   71    /**
   72     * @memberof AtRule#
   73:    * @member {string} name - the at-rule's name immediately follows the `@`
   74     *
   75     * @example
   ..
   81    /**
   82     * @memberof AtRule#
   83:    * @member {string} params - the at-rule's parameters, the values
   84:    *                           that follow the at-rule's name but precede
   85     *                           any {} block
   86     *
   ..
  112     * PostCSS cleans at-rule parameters from comments and extra spaces,
  113     * but it stores origin content in raws properties.
  114:    * As such, if you don't change a declaration's value,
  115     * PostCSS will use the raw value with comments.
  116     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/comment.js:
   37    /**
   38     * @memberof Comment#
   39:    * @member {string} text - the comment's text
   40     */
   41  
   ..
   49     *
   50     * * `before`: the space symbols before the node.
   51:    * * `left`: the space symbols between `/*` and the comment's text.
   52:    * * `right`: the space symbols between the comment's text.
   53     */
   54  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/container.js:
   60  
   61      /**
   62:      * Iterates through the container's immediate children,
   63       * calling `callback` for each child.
   64       *
   65       * Returning `false` in the callback will break iteration.
   66       *
   67:      * This method only iterates through the container's immediate children.
   68:      * If you need to recursively iterate through all the container's descendant
   69       * nodes, use {@link Container#walk}.
   70       *
   ..
  120  
  121      /**
  122:      * Traverses the container's descendant nodes, calling callback
  123       * for each node.
  124       *
  ...
  126       * if you are mutating arrays during iteration.
  127       *
  128:      * If you only need to iterate through the container's immediate children,
  129       * use {@link Container#each}.
  130       *
  ...
  151  
  152      /**
  153:      * Traverses the container's descendant nodes, calling callback
  154       * for each declaration node.
  155       *
  ...
  205  
  206      /**
  207:      * Traverses the container's descendant nodes, calling callback
  208       * for each rule node.
  209       *
  ...
  254  
  255      /**
  256:      * Traverses the container's descendant nodes, calling callback
  257       * for each at-rule node.
  258       *
  ...
  309  
  310      /**
  311:      * Traverses the container's descendant nodes, calling callback
  312       * for each comment node.
  313       *
  ...
  483       * Insert new node before old node within the container.
  484       *
  485:      * @param {Node|number} exist             - child or child's index.
  486       * @param {Node|object|string|Node[]} add - new node
  487       *
  ...
  526       * Insert new node after old node within the container.
  527       *
  528:      * @param {Node|number} exist             - child or child's index
  529       * @param {Node|object|string|Node[]} add - new node
  530       *
  ...
  566       * from the node and its children.
  567       *
  568:      * @param {Node|number} child - child or child's index
  569       *
  570       * @return {Node} this node for methods chain
  ...
  636       * @param {object} opts                - options to speed up the search
  637       * @param {string|string[]} opts.props - an array of property names
  638:      * @param {string} opts.fast           - string that's used
  639       *                                       to narrow down values and speed up
  640                                               the regexp search
  ...
  674      /**
  675       * Returns `true` if callback returns `true`
  676:      * for all of the container's children.
  677       *
  678       * @param {childCondition} condition - iterator returns true or false.
  ...
  691      /**
  692       * Returns `true` if callback returns `true` for (at least) one
  693:      * of the container's children.
  694       *
  695       * @param {childCondition} condition - iterator returns true or false.
  ...
  707  
  708      /**
  709:      * Returns a `child`'s index within the {@link Container#nodes} array.
  710       *
  711       * @param {Node} child - child of the current container.
  ...
  727  
  728      /**
  729:      * The container's first child.
  730       *
  731       * @type {Node}
  ...
  851      /**
  852       * @memberof Container#
  853:      * @member {Node[]} nodes - an array containing the container's children
  854       *
  855       * @example
  ...
  868  
  869          /**
  870:          * The container's last child.
  871           *
  872           * @type {Node}

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/declaration.js:
   40    /**
   41     * @memberof Declaration#
   42:    * @member {string} prop - the declaration's property name
   43     *
   44     * @example
   ..
   50    /**
   51     * @memberof Declaration#
   52:    * @member {string} value - the declaration's value
   53     *
   54     * @example
   ..
   86     * PostCSS cleans declaration from comments and extra spaces,
   87     * but it stores origin content in raws properties.
   88:    * As such, if you don't change a declaration's value,
   89     * PostCSS will use the raw value with comments.
   90     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/node.js:
   90       * @param {string} opts.plugin - plugin name that created this error.
   91       *                               PostCSS will set it automatically.
   92:      * @param {string} opts.word   - a word inside a node's string that should
   93       *                               be highlighted as the source of the error
   94:      * @param {number} opts.index  - an index inside a node's string that should
   95       *                               be highlighted as the source of the error
   96       *
   ..
  129       * @param {string} opts.plugin - plugin name that created this warning.
  130       *                               PostCSS will set it automatically.
  131:      * @param {string} opts.word   - a word inside a node's string that should
  132       *                               be highlighted as the source of the warning
  133:      * @param {number} opts.index  - an index inside a node's string that should
  134       *                               be highlighted as the source of the warning
  135       *
  ...
  334  
  335      /**
  336:      * Returns the next child of the node's parent.
  337       * Returns `undefined` if the current node is the last child.
  338       *
  ...
  355  
  356      /**
  357:      * Returns the previous child of the node's parent.
  358       * Returns `undefined` if the current node is the first child.
  359       *
  ...
  374  
  375      /**
  376:      * Insert new node before current node to current node's parent.
  377       *
  378       * Just alias for `node.parent.insertBefore(node, add)`.
  ...
  393  
  394      /**
  395:      * Insert new node after current node to current node's parent.
  396       *
  397       * Just alias for `node.parent.insertAfter(node, add)`.
  ...
  463  
  464      /**
  465:      * Finds the Root instance of the node's tree.
  466       *
  467       * @example
  ...
  515      /**
  516       * @memberof Node#
  517:      * @member {string} type - String representing the node's type.
  518       *                         Possible values are `root`, `atrule`, `rule`,
  519       *                         `decl`, or `comment`.
  ...
  525      /**
  526       * @memberof Node#
  527:      * @member {Container} parent - the node's parent node.
  528       *
  529       * @example
  ...
  540       * that node will not have a `source` property and will be absent
  541       * from the source map. For this reason, the plugin developer should
  542:      * consider cloning nodes to create new ones (in which case the new node's
  543       * source will reference the original, cloned node) or setting
  544       * the `source` property manually.
  ...
  586       *   an (optional) semicolon.
  587       * * `afterName`: the space between the at-rule name and its parameters.
  588:      * * `left`: the space symbols between `/*` and the comment's text.
  589:      * * `right`: the space symbols between the comment's text
  590       *   and <code>*&#47;</code>.
  591       * * `important`: the content of the important statement,
  ...
  594       * PostCSS cleans selectors, declaration values and at-rule parameters
  595       * from comments and extra spaces, but it stores origin content in raws
  596:      * properties. As such, if you don't change a declaration's value,
  597       * PostCSS will use the raw value with comments.
  598       *
  ...
  616   * @typedef {object} source
  617   * @property {Input} input    - {@link Input} with input file
  618:  * @property {position} start - The starting position of the node's source
  619:  * @property {position} end   - The ending position of the node's source
  620   */
  621  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/postcss.d.ts:
  667          prev(): ChildNode | void;
  668  		/**
  669: 		 * Insert new node before current node to current node's parent.
  670  		 * 
  671  		 * Just an alias for `node.parent.insertBefore(node, newNode)`.
  ...
  678  		before(newNode: Node | object | string | Node[]): this;
  679  		/**
  680: 		 * Insert new node after current node to current node's parent.
  681  		 * 
  682  		 * Just an alias for `node.parent.insertAfter(node, newNode)`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/postcss.js:
  173   *
  174   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  175:  * @param {builder} builder - function to concatenate CSS from node's parts
  176   *                            or generate string and source map
  177   *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/processor.js:
   90    /**
   91     * Parses source CSS and returns a {@link LazyResult} Promise proxy.
   92:    * Because some plugins can be asynchronous it doesn't make
   93     * any transformations. Transformations will be applied
   94     * in the {@link LazyResult} methods.
   ..
  158   * @param {string} part          - part of generated CSS connected to this node
  159   * @param {Node}   node          - AST node
  160:  * @param {"start"|"end"} [type] - node's part type
  161   */
  162  
  ...
  175   *
  176   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  177:  * @param {builder} builder - function to concatenate CSS from node's parts
  178   *                            or generate string and source map
  179   *
  ...
  209   *                                       because it is used in source map
  210   *                                       generation and syntax error messages.
  211:  * @property {string} to               - the path where you'll put the output
  212   *                                       CSS file. You should always set `to`
  213   *                                       to generate correct source maps.
  ...
  233   * @property {string|false} map.annotation           - does PostCSS should set
  234   *                                                     annotation comment to map
  235:  * @property {string} map.from                       - override `from` in map's
  236   *                                                     `sources`
  237   */

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/root.js:
   82  
   83      /**
   84:      * Returns a {@link Result} instance representing the root's CSS.
   85       *
   86       * @param {processOptions} [opts] - options with only `to` and `map` keys
   87       *
   88:      * @return {Result} result with current root's CSS
   89       *
   90       * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/rule.js:
   46  
   47    /**
   48:    * An array containing the rule's individual selectors.
   49     * Groups of selectors are split at commas.
   50     *
   ..
   76      /**
   77       * @memberof Rule#
   78:      * @member {string} selector - the rule's full selector represented
   79       *                             as a string
   80       *
   ..
  106       * PostCSS cleans selectors from comments and extra spaces,
  107       * but it stores origin content in raws properties.
  108:      * As such, if you don't change a declaration's value,
  109       * PostCSS will use the raw value with comments.
  110       *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/lib/warning.js:
    6  
    7  /**
    8:  * Represents a plugin's warning. It can be created using {@link Node#warn}.
    9   *
   10   * @example
   ..
   52        /**
   53         * @member {number} - Line in the input file
   54:        *                    with this warning's source
   55         *
   56         * @example
   ..
   60        /**
   61         * @member {number} - Column in the input file
   62:        *                    with this warning's source.
   63         *
   64         * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-scope/node_modules/postcss/README.md:
    2  
    3  <img align="right" width="95" height="95"
    4:      alt="Philosopher's stone, logo of PostCSS"
    5       src="http://postcss.github.io/postcss/logo.svg">
    6  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/CHANGELOG.md:
   21  
   22  ## 6.0.12
   23: * Don't copy `*` hack to declaration indent.
   24  
   25  ## 6.0.11
   ..
   63  * Remove deprecated method from PostCSS 4.
   64  * Insert methods remove child from previous parent, instead of closing.
   65: * Insert methods and cloning doesn't clean `raws` anymore.
   66  * Methods `moveTo`, `moveAfter`, `moveBefore` were deprecated.
   67  * Options was changed in `Plugin#process(css, processOptions, pluginOptions)`.
   ..
  152  * Add declaration value type check in shortcut creating (by 刘祺).
  153  * `Result#warn` now returns new created warning.
  154: * Don't call plugin creator in `postcss.plugin` call.
  155  * Add source maps to PostCSS ES5 build.
  156  * Add JSDoc to PostCSS classes.
  ...
  494  
  495  ## 0.3.3
  496: * Remove source map hacks by using new Mozilla's `source-map` (by Simon Lydell).
  497  
  498  ## 0.3.2
  ...
  517  * Add `selectors` shortcut to get selectors array.
  518  * Add `toResult` method to `Rule` to simplify work with several input files.
  519: * Clean declaration's `value`, rule's `selector` and at-rule's `params`
  520    by storing spaces in `between` property.
  521  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/docs/guidelines/plugin.md:
    6  The rules below are *mandatory* for all PostCSS plugins.
    7  
    8: See also [ClojureWerkz's recommendations] for open source projects.
    9  
   10: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   11  
   12  ## 1. API
   ..
   14  ### 1.1 Clear name with `postcss-` prefix
   15  
   16: The plugin's purpose should be clear just by reading its name.
   17  If you wrote a transpiler for CSS 4 Custom Media, `postcss-custom-media`
   18  would be a good name. If you wrote a plugin to support mixins,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/docs/guidelines/runner.md:
    8  these rules are not mandatory but are highly recommended.
    9  
   10: See also [ClojureWerkz's recommendations] for open source projects.
   11  
   12: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   13  [`gulp-autoprefixer`]: https://github.com/sindresorhus/gulp-autoprefixer
   14  [`gulp‑postcss`]:      https://github.com/w0rm/gulp-postcss
   ..
   51  PostCSS runners must use only the asynchronous API.
   52  The synchronous API is provided only for debugging, is slower,
   53: and can't work with asynchronous plugins.
   54  
   55  ```js
   ..
   69  ## 3. Output
   70  
   71: ### 3.1. Don't show JS stack for `CssSyntaxError`
   72  
   73  PostCSS runners must not show a stack trace for CSS syntax errors,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/docs/source-maps.md:
   10  To generate a new source map with the default options, simply set `map: true`.
   11  This will generate an inline source map that contains the source content.
   12: If you don't want the map inlined, you can set `map.inline: false`.
   13  
   14  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/docs/syntax.md:
    9  There are 3 types of PostCSS syntax packages:
   10  
   11: * **Parser** to parse input string to node's tree.
   12: * **Stringifier** to generate output string by node's tree.
   13  * **Syntax** contains both parser and stringifier.
   14  
   ..
  160  
  161  The Stringifier API is little bit more complicated, than the parser API.
  162: PostCSS generates a source map, so a stringifier can't just return a string.
  163  It must link every substring with its source node.
  164  
  165  A Stringifier is a function which receives [`Root`] node and builder callback.
  166: Then it calls builder with every node's string and node instance.
  167  
  168  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/at-rule.js:
   18   * Represents an at-rule.
   19   *
   20:  * If it's followed in the CSS by a {} block, this node will have
   21   * a nodes property representing its children.
   22   *
   ..
   71    /**
   72     * @memberof AtRule#
   73:    * @member {string} name - the at-rule's name immediately follows the `@`
   74     *
   75     * @example
   ..
   81    /**
   82     * @memberof AtRule#
   83:    * @member {string} params - the at-rule's parameters, the values
   84:    *                           that follow the at-rule's name but precede
   85     *                           any {} block
   86     *
   ..
  112     * PostCSS cleans at-rule parameters from comments and extra spaces,
  113     * but it stores origin content in raws properties.
  114:    * As such, if you don't change a declaration's value,
  115     * PostCSS will use the raw value with comments.
  116     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/comment.js:
   37    /**
   38     * @memberof Comment#
   39:    * @member {string} text - the comment's text
   40     */
   41  
   ..
   49     *
   50     * * `before`: the space symbols before the node.
   51:    * * `left`: the space symbols between `/*` and the comment's text.
   52:    * * `right`: the space symbols between the comment's text.
   53     */
   54  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/container.js:
   60  
   61      /**
   62:      * Iterates through the container's immediate children,
   63       * calling `callback` for each child.
   64       *
   65       * Returning `false` in the callback will break iteration.
   66       *
   67:      * This method only iterates through the container's immediate children.
   68:      * If you need to recursively iterate through all the container's descendant
   69       * nodes, use {@link Container#walk}.
   70       *
   ..
  120  
  121      /**
  122:      * Traverses the container's descendant nodes, calling callback
  123       * for each node.
  124       *
  ...
  126       * if you are mutating arrays during iteration.
  127       *
  128:      * If you only need to iterate through the container's immediate children,
  129       * use {@link Container#each}.
  130       *
  ...
  151  
  152      /**
  153:      * Traverses the container's descendant nodes, calling callback
  154       * for each declaration node.
  155       *
  ...
  205  
  206      /**
  207:      * Traverses the container's descendant nodes, calling callback
  208       * for each rule node.
  209       *
  ...
  254  
  255      /**
  256:      * Traverses the container's descendant nodes, calling callback
  257       * for each at-rule node.
  258       *
  ...
  309  
  310      /**
  311:      * Traverses the container's descendant nodes, calling callback
  312       * for each comment node.
  313       *
  ...
  483       * Insert new node before old node within the container.
  484       *
  485:      * @param {Node|number} exist             - child or child's index.
  486       * @param {Node|object|string|Node[]} add - new node
  487       *
  ...
  526       * Insert new node after old node within the container.
  527       *
  528:      * @param {Node|number} exist             - child or child's index
  529       * @param {Node|object|string|Node[]} add - new node
  530       *
  ...
  566       * from the node and its children.
  567       *
  568:      * @param {Node|number} child - child or child's index
  569       *
  570       * @return {Node} this node for methods chain
  ...
  636       * @param {object} opts                - options to speed up the search
  637       * @param {string|string[]} opts.props - an array of property names
  638:      * @param {string} opts.fast           - string that's used
  639       *                                       to narrow down values and speed up
  640                                               the regexp search
  ...
  674      /**
  675       * Returns `true` if callback returns `true`
  676:      * for all of the container's children.
  677       *
  678       * @param {childCondition} condition - iterator returns true or false.
  ...
  691      /**
  692       * Returns `true` if callback returns `true` for (at least) one
  693:      * of the container's children.
  694       *
  695       * @param {childCondition} condition - iterator returns true or false.
  ...
  707  
  708      /**
  709:      * Returns a `child`'s index within the {@link Container#nodes} array.
  710       *
  711       * @param {Node} child - child of the current container.
  ...
  727  
  728      /**
  729:      * The container's first child.
  730       *
  731       * @type {Node}
  ...
  851      /**
  852       * @memberof Container#
  853:      * @member {Node[]} nodes - an array containing the container's children
  854       *
  855       * @example
  ...
  868  
  869          /**
  870:          * The container's last child.
  871           *
  872           * @type {Node}

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/declaration.js:
   40    /**
   41     * @memberof Declaration#
   42:    * @member {string} prop - the declaration's property name
   43     *
   44     * @example
   ..
   50    /**
   51     * @memberof Declaration#
   52:    * @member {string} value - the declaration's value
   53     *
   54     * @example
   ..
   86     * PostCSS cleans declaration from comments and extra spaces,
   87     * but it stores origin content in raws properties.
   88:    * As such, if you don't change a declaration's value,
   89     * PostCSS will use the raw value with comments.
   90     *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/node.js:
   90       * @param {string} opts.plugin - plugin name that created this error.
   91       *                               PostCSS will set it automatically.
   92:      * @param {string} opts.word   - a word inside a node's string that should
   93       *                               be highlighted as the source of the error
   94:      * @param {number} opts.index  - an index inside a node's string that should
   95       *                               be highlighted as the source of the error
   96       *
   ..
  129       * @param {string} opts.plugin - plugin name that created this warning.
  130       *                               PostCSS will set it automatically.
  131:      * @param {string} opts.word   - a word inside a node's string that should
  132       *                               be highlighted as the source of the warning
  133:      * @param {number} opts.index  - an index inside a node's string that should
  134       *                               be highlighted as the source of the warning
  135       *
  ...
  334  
  335      /**
  336:      * Returns the next child of the node's parent.
  337       * Returns `undefined` if the current node is the last child.
  338       *
  ...
  355  
  356      /**
  357:      * Returns the previous child of the node's parent.
  358       * Returns `undefined` if the current node is the first child.
  359       *
  ...
  374  
  375      /**
  376:      * Insert new node before current node to current node's parent.
  377       *
  378       * Just alias for `node.parent.insertBefore(node, add)`.
  ...
  393  
  394      /**
  395:      * Insert new node after current node to current node's parent.
  396       *
  397       * Just alias for `node.parent.insertAfter(node, add)`.
  ...
  463  
  464      /**
  465:      * Finds the Root instance of the node's tree.
  466       *
  467       * @example
  ...
  515      /**
  516       * @memberof Node#
  517:      * @member {string} type - String representing the node's type.
  518       *                         Possible values are `root`, `atrule`, `rule`,
  519       *                         `decl`, or `comment`.
  ...
  525      /**
  526       * @memberof Node#
  527:      * @member {Container} parent - the node's parent node.
  528       *
  529       * @example
  ...
  540       * that node will not have a `source` property and will be absent
  541       * from the source map. For this reason, the plugin developer should
  542:      * consider cloning nodes to create new ones (in which case the new node's
  543       * source will reference the original, cloned node) or setting
  544       * the `source` property manually.
  ...
  586       *   an (optional) semicolon.
  587       * * `afterName`: the space between the at-rule name and its parameters.
  588:      * * `left`: the space symbols between `/*` and the comment's text.
  589:      * * `right`: the space symbols between the comment's text
  590       *   and <code>*&#47;</code>.
  591       * * `important`: the content of the important statement,
  ...
  594       * PostCSS cleans selectors, declaration values and at-rule parameters
  595       * from comments and extra spaces, but it stores origin content in raws
  596:      * properties. As such, if you don't change a declaration's value,
  597       * PostCSS will use the raw value with comments.
  598       *
  ...
  616   * @typedef {object} source
  617   * @property {Input} input    - {@link Input} with input file
  618:  * @property {position} start - The starting position of the node's source
  619:  * @property {position} end   - The ending position of the node's source
  620   */
  621  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/postcss.d.ts:
  667          prev(): ChildNode | void;
  668  		/**
  669: 		 * Insert new node before current node to current node's parent.
  670  		 * 
  671  		 * Just an alias for `node.parent.insertBefore(node, newNode)`.
  ...
  678  		before(newNode: Node | object | string | Node[]): this;
  679  		/**
  680: 		 * Insert new node after current node to current node's parent.
  681  		 * 
  682  		 * Just an alias for `node.parent.insertAfter(node, newNode)`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/postcss.js:
  173   *
  174   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  175:  * @param {builder} builder - function to concatenate CSS from node's parts
  176   *                            or generate string and source map
  177   *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/processor.js:
   90    /**
   91     * Parses source CSS and returns a {@link LazyResult} Promise proxy.
   92:    * Because some plugins can be asynchronous it doesn't make
   93     * any transformations. Transformations will be applied
   94     * in the {@link LazyResult} methods.
   ..
  158   * @param {string} part          - part of generated CSS connected to this node
  159   * @param {Node}   node          - AST node
  160:  * @param {"start"|"end"} [type] - node's part type
  161   */
  162  
  ...
  175   *
  176   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  177:  * @param {builder} builder - function to concatenate CSS from node's parts
  178   *                            or generate string and source map
  179   *
  ...
  209   *                                       because it is used in source map
  210   *                                       generation and syntax error messages.
  211:  * @property {string} to               - the path where you'll put the output
  212   *                                       CSS file. You should always set `to`
  213   *                                       to generate correct source maps.
  ...
  233   * @property {string|false} map.annotation           - does PostCSS should set
  234   *                                                     annotation comment to map
  235:  * @property {string} map.from                       - override `from` in map's
  236   *                                                     `sources`
  237   */

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/root.js:
   82  
   83      /**
   84:      * Returns a {@link Result} instance representing the root's CSS.
   85       *
   86       * @param {processOptions} [opts] - options with only `to` and `map` keys
   87       *
   88:      * @return {Result} result with current root's CSS
   89       *
   90       * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/rule.js:
   46  
   47    /**
   48:    * An array containing the rule's individual selectors.
   49     * Groups of selectors are split at commas.
   50     *
   ..
   76      /**
   77       * @memberof Rule#
   78:      * @member {string} selector - the rule's full selector represented
   79       *                             as a string
   80       *
   ..
  106       * PostCSS cleans selectors from comments and extra spaces,
  107       * but it stores origin content in raws properties.
  108:      * As such, if you don't change a declaration's value,
  109       * PostCSS will use the raw value with comments.
  110       *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/lib/warning.js:
    6  
    7  /**
    8:  * Represents a plugin's warning. It can be created using {@link Node#warn}.
    9   *
   10   * @example
   ..
   52        /**
   53         * @member {number} - Line in the input file
   54:        *                    with this warning's source
   55         *
   56         * @example
   ..
   60        /**
   61         * @member {number} - Column in the input file
   62:        *                    with this warning's source.
   63         *
   64         * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss-modules-values/node_modules/postcss/README.md:
    2  
    3  <img align="right" width="95" height="95"
    4:      alt="Philosopher's stone, logo of PostCSS"
    5       src="http://postcss.github.io/postcss/logo.svg">
    6  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/CHANGELOG.md:
   79  * Add declaration value type check in shortcut creating (by 刘祺).
   80  * `Result#warn` now returns new created warning.
   81: * Don't call plugin creator in `postcss.plugin` call.
   82  * Add source maps to PostCSS ES5 build.
   83  * Add JSDoc to PostCSS classes.
   ..
  421  
  422  ## 0.3.3
  423: * Remove source map hacks by using new Mozilla's `source-map` (by Simon Lydell).
  424  
  425  ## 0.3.2
  ...
  444  * Add `selectors` shortcut to get selectors array.
  445  * Add `toResult` method to `Rule` to simplify work with several input files.
  446: * Clean declaration's `value`, rule's `selector` and at-rule's `params`
  447    by storing spaces in `between` property.
  448  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/docs/guidelines/plugin.md:
    6  The rules below are *mandatory* for all PostCSS plugins.
    7  
    8: See also [ClojureWerkz's recommendations] for open source projects.
    9  
   10: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   11  
   12  ## 1. API
   ..
   14  ### 1.1 Clear name with `postcss-` prefix
   15  
   16: The plugin's purpose should be clear just by reading its name.
   17  If you wrote a transpiler for CSS 4 Custom Media, `postcss-custom-media`
   18  would be a good name. If you wrote a plugin to support mixins,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/docs/guidelines/runner.md:
    8  these rules are not mandatory but are highly recommended.
    9  
   10: See also [ClojureWerkz's recommendations] for open source projects.
   11  
   12: [ClojureWerkz's recommendations]:  http://blog.clojurewerkz.org/blog/2013/04/20/how-to-make-your-open-source-project-really-awesome/
   13  [`gulp-autoprefixer`]: https://github.com/sindresorhus/gulp-autoprefixer
   14  [`gulp‑postcss`]:      https://github.com/w0rm/gulp-postcss
   ..
   51  PostCSS runners must use only the asynchronous API.
   52  The synchronous API is provided only for debugging, is slower,
   53: and can't work with asynchronous plugins.
   54  
   55  ```js
   ..
   69  ## 3. Output
   70  
   71: ### 3.1. Don't show JS stack for `CssSyntaxError`
   72  
   73  PostCSS runners must not show a stack trace for CSS syntax errors,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/docs/source-maps.md:
   10  To generate a new source map with the default options, simply set `map: true`.
   11  This will generate an inline source map that contains the source content.
   12: If you don't want the map inlined, you can set `map.inline: false`.
   13  
   14  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/docs/syntax.md:
    9  There are 3 types of PostCSS syntax packages:
   10  
   11: * **Parser** to parse input string to node's tree.
   12: * **Stringifier** to generate output string by node's tree.
   13  * **Syntax** contains both parser and stringifier.
   14  
   ..
  160  
  161  The Stringifier API is little bit more complicated, than the parser API.
  162: PostCSS generates a source map, so a stringifier can't just return a string.
  163  It must link every substring with its source node.
  164  
  165  A Stringifier is a function which receives [`Root`] node and builder callback.
  166: Then it calls builder with every node's string and node instance.
  167  
  168  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/at-rule.js:
   24   * Represents an at-rule.
   25   *
   26:  * If it's followed in the CSS by a {} block, this node will have
   27   * a nodes property representing its children.
   28   *
   ..
   98          /**
   99           * @memberof AtRule#
  100:          * @member {string} name - the at-rule's name immediately follows the `@`
  101           *
  102           * @example
  ...
  108          /**
  109           * @memberof AtRule#
  110:          * @member {string} params - the at-rule's parameters, the values
  111:          *                           that follow the at-rule's name but precede
  112           *                           any {} block
  113           *
  ...
  139           * PostCSS cleans at-rule parameters from comments and extra spaces,
  140           * but it stores origin content in raws properties.
  141:          * As such, if you don't change a declaration's value,
  142           * PostCSS will use the raw value with comments.
  143           *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/comment.js:
   64          /**
   65           * @memberof Comment#
   66:          * @member {string} text - the comment's text
   67           */
   68  
   ..
   76           *
   77           * * `before`: the space symbols before the node.
   78:          * * `left`: the space symbols between `/*` and the comment's text.
   79:          * * `right`: the space symbols between the comment's text.
   80           */
   81  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/container.js:
   64  
   65      /**
   66:      * Iterates through the container's immediate children,
   67       * calling `callback` for each child.
   68       *
   69       * Returning `false` in the callback will break iteration.
   70       *
   71:      * This method only iterates through the container's immediate children.
   72:      * If you need to recursively iterate through all the container's descendant
   73       * nodes, use {@link Container#walk}.
   74       *
   ..
  124  
  125      /**
  126:      * Traverses the container's descendant nodes, calling callback
  127       * for each node.
  128       *
  ...
  130       * if you are mutating arrays during iteration.
  131       *
  132:      * If you only need to iterate through the container's immediate children,
  133       * use {@link Container#each}.
  134       *
  ...
  155  
  156      /**
  157:      * Traverses the container's descendant nodes, calling callback
  158       * for each declaration node.
  159       *
  ...
  209  
  210      /**
  211:      * Traverses the container's descendant nodes, calling callback
  212       * for each rule node.
  213       *
  ...
  258  
  259      /**
  260:      * Traverses the container's descendant nodes, calling callback
  261       * for each at-rule node.
  262       *
  ...
  313  
  314      /**
  315:      * Traverses the container's descendant nodes, calling callback
  316       * for each comment node.
  317       *
  ...
  487       * Insert new node before old node within the container.
  488       *
  489:      * @param {Node|number} exist             - child or child's index.
  490       * @param {Node|object|string|Node[]} add - new node
  491       *
  ...
  530       * Insert new node after old node within the container.
  531       *
  532:      * @param {Node|number} exist             - child or child's index
  533       * @param {Node|object|string|Node[]} add - new node
  534       *
  ...
  580       * from the node and its children.
  581       *
  582:      * @param {Node|number} child - child or child's index
  583       *
  584       * @return {Node} this node for methods chain
  ...
  650       * @param {object} opts                - options to speed up the search
  651       * @param {string|string[]} opts.props - an array of property names
  652:      * @param {string} opts.fast           - string that's used
  653       *                                       to narrow down values and speed up
  654                                               the regexp search
  ...
  688      /**
  689       * Returns `true` if callback returns `true`
  690:      * for all of the container's children.
  691       *
  692       * @param {childCondition} condition - iterator returns true or false.
  ...
  705      /**
  706       * Returns `true` if callback returns `true` for (at least) one
  707:      * of the container's children.
  708       *
  709       * @param {childCondition} condition - iterator returns true or false.
  ...
  721  
  722      /**
  723:      * Returns a `child`'s index within the {@link Container#nodes} array.
  724       *
  725       * @param {Node} child - child of the current container.
  ...
  741  
  742      /**
  743:      * The container's first child.
  744       *
  745       * @type {Node}
  ...
  864  
  865          /**
  866:          * The container's last child.
  867           *
  868           * @type {Node}
  ...
  901          /**
  902           * @memberof Container#
  903:          * @member {Node[]} nodes - an array containing the container's children
  904           *
  905           * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/declaration.js:
   67          /**
   68           * @memberof Declaration#
   69:          * @member {string} prop - the declaration's property name
   70           *
   71           * @example
   ..
   77          /**
   78           * @memberof Declaration#
   79:          * @member {string} value - the declaration's value
   80           *
   81           * @example
   ..
  113           * PostCSS cleans declaration from comments and extra spaces,
  114           * but it stores origin content in raws properties.
  115:          * As such, if you don't change a declaration's value,
  116           * PostCSS will use the raw value with comments.
  117           *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/node.js:
   92       * @param {string} opts.plugin - plugin name that created this error.
   93       *                               PostCSS will set it automatically.
   94:      * @param {string} opts.word   - a word inside a node's string that should
   95       *                               be highlighted as the source of the error
   96:      * @param {number} opts.index  - an index inside a node's string that should
   97       *                               be highlighted as the source of the error
   98       *
   ..
  131       * @param {string} opts.plugin - plugin name that created this warning.
  132       *                               PostCSS will set it automatically.
  133:      * @param {string} opts.word   - a word inside a node's string that should
  134       *                               be highlighted as the source of the warning
  135:      * @param {number} opts.index  - an index inside a node's string that should
  136       *                               be highlighted as the source of the warning
  137       *
  ...
  341       * a new parent before `otherNode`.
  342       *
  343:      * This will also clean the node's code style properties just as it would
  344       * in {@link Node#moveTo}.
  345       *
  ...
  361       * a new parent after `otherNode`.
  362       *
  363:      * This will also clean the node's code style properties just as it would
  364       * in {@link Node#moveTo}.
  365       *
  ...
  378  
  379      /**
  380:      * Returns the next child of the node's parent.
  381       * Returns `undefined` if the current node is the last child.
  382       *
  ...
  399  
  400      /**
  401:      * Returns the previous child of the node's parent.
  402       * Returns `undefined` if the current node is the first child.
  403       *
  ...
  469  
  470      /**
  471:      * Finds the Root instance of the node's tree.
  472       *
  473       * @example
  ...
  562          /**
  563           * @memberof Node#
  564:          * @member {string} type - String representing the node's type.
  565           *                         Possible values are `root`, `atrule`, `rule`,
  566           *                         `decl`, or `comment`.
  ...
  572          /**
  573           * @memberof Node#
  574:          * @member {Container} parent - the node's parent node.
  575           *
  576           * @example
  ...
  587           * that node will not have a `source` property and will be absent
  588           * from the source map. For this reason, the plugin developer should
  589:          * consider cloning nodes to create new ones (in which case the new node's
  590           * source will reference the original, cloned node) or setting
  591           * the `source` property manually.
  ...
  633           *   an (optional) semicolon.
  634           * * `afterName`: the space between the at-rule name and its parameters.
  635:          * * `left`: the space symbols between `/*` and the comment's text.
  636:          * * `right`: the space symbols between the comment's text
  637           *   and <code>*&#47;</code>.
  638           * * `important`: the content of the important statement,
  ...
  641           * PostCSS cleans selectors, declaration values and at-rule parameters
  642           * from comments and extra spaces, but it stores origin content in raws
  643:          * properties. As such, if you don't change a declaration's value,
  644           * PostCSS will use the raw value with comments.
  645           *
  ...
  665   * @typedef {object} source
  666   * @property {Input} input    - {@link Input} with input file
  667:  * @property {position} start - The starting position of the node's source
  668:  * @property {position} end   - The ending position of the node's source
  669   */
  670  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/postcss.js:
  173   *
  174   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  175:  * @param {builder} builder - function to concatenate CSS from node's parts
  176   *                            or generate string and source map
  177   *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/processor.js:
   90    /**
   91     * Parses source CSS and returns a {@link LazyResult} Promise proxy.
   92:    * Because some plugins can be asynchronous it doesn't make
   93     * any transformations. Transformations will be applied
   94     * in the {@link LazyResult} methods.
   ..
  158   * @param {string} part          - part of generated CSS connected to this node
  159   * @param {Node}   node          - AST node
  160:  * @param {"start"|"end"} [type] - node's part type
  161   */
  162  
  ...
  175   *
  176   * @param {Node} node       - start node for stringifing. Usually {@link Root}.
  177:  * @param {builder} builder - function to concatenate CSS from node's parts
  178   *                            or generate string and source map
  179   *
  ...
  209   *                                       because it is used in source map
  210   *                                       generation and syntax error messages.
  211:  * @property {string} to               - the path where you'll put the output
  212   *                                       CSS file. You should always set `to`
  213   *                                       to generate correct source maps.
  ...
  233   * @property {string|false} map.annotation           - does PostCSS should set
  234   *                                                     annotation comment to map
  235:  * @property {string} map.from                       - override `from` in map's
  236   *                                                     `sources`
  237   */

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/root.js:
   86  
   87      /**
   88:      * Returns a {@link Result} instance representing the root's CSS.
   89       *
   90       * @param {processOptions} [opts] - options with only `to` and `map` keys
   91       *
   92:      * @return {Result} result with current root's CSS
   93       *
   94       * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/rule.js:
   50  
   51      /**
   52:      * An array containing the rule's individual selectors.
   53       * Groups of selectors are split at commas.
   54       *
   ..
   90          /**
   91           * @memberof Rule#
   92:          * @member {string} selector - the rule's full selector represented
   93           *                             as a string
   94           *
   ..
  119           * PostCSS cleans selectors from comments and extra spaces,
  120           * but it stores origin content in raws properties.
  121:          * As such, if you don't change a declaration's value,
  122           * PostCSS will use the raw value with comments.
  123           *

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/lib/warning.js:
    6  
    7  /**
    8:  * Represents a plugin's warning. It can be created using {@link Node#warn}.
    9   *
   10   * @example
   ..
   52        /**
   53         * @member {number} - Line in the input file
   54:        *                    with this warning's source
   55         *
   56         * @example
   ..
   60        /**
   61         * @member {number} - Column in the input file
   62:        *                    with this warning's source.
   63         *
   64         * @example

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/postcss/README.md:
    2  
    3  <img align="right" width="95" height="95"
    4:      title="Philosopher's stone, logo of PostCSS"
    5       src="http://postcss.github.io/postcss/logo.svg">
    6  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/prop-types/README.md:
    6  components. React (and potentially other libraries—see the checkPropTypes()
    7  reference below) will check props passed to your components against those
    8: definitions, and warn in development if they don't match.
    9  
   10  ## Installation
   ..
  164  Make sure that the version range uses a caret (`^`) and thus is broad enough for npm to efficiently deduplicate packages.
  165  
  166: For UMD bundles of your components, make sure you **don't** include `PropTypes` in the build. Usually this is done by marking it as an external (the specifics depend on your bundler), just like you do with React.
  167  
  168  ## Compatibility
  ...
  187  ### What happens on other React versions?
  188  
  189: It outputs warnings with the message below even though the developer doesn't do anything wrong. Unfortunately there is no solution for this other than updating React to either 15.3.0 or higher, or 0.14.9 if you're using React 0.14.
  190  
  191: ## Difference from `React.PropTypes`: Don't Call Validator Functions
  192  
  193  First of all, **which version of React are you using**? You might be seeing this message because a component library has updated to use `prop-types` package, but your version of React is incompatible with it. See the [above section](#compatibility) for more details.
  ...
  221  (If you see **a warning** rather than an error with this message, please check the [above section about compatibility](#compatibility).)
  222  
  223: This is new behavior, and you will only encounter it when you migrate from `React.PropTypes` to the `prop-types` package. For the vast majority of components, this doesn't matter, and if you didn't see [this warning](https://facebook.github.io/react/warnings/dont-call-proptypes.html) in your components, your code is safe to migrate. This is not a breaking change in React because you are only opting into this change for a component by explicitly changing your imports to use `prop-types`. If you temporarily need the old behavior, you can keep using `React.PropTypes` until React 16.
  224  
  225  **If you absolutely need to trigger the validation manually**, call `PropTypes.checkPropTypes()`. Unlike the validators themselves, this function is safe to call in production, as it will be replaced by an empty function:
  ...
  231  See below for more info.
  232  
  233: **You might also see this error** if you're calling a `PropTypes` validator from your own custom `PropTypes` validator. In this case, the fix is to make sure that you are passing *all* of the arguments to the inner function. There is a more in-depth explanation of how to fix it [on this page](https://facebook.github.io/react/warnings/dont-call-proptypes.html#fixing-the-false-positive-in-third-party-proptypes). Alternatively, you can temporarily keep using `React.PropTypes` until React 16, as it would still only warn in this case.
  234  
  235: If you use a bundler like Browserify or Webpack, don't forget to [follow these instructions](https://facebook.github.io/react/docs/installation.html#development-and-production-versions) to correctly bundle your application in development or production mode. Otherwise you'll ship unnecessary code to your users.
  236  
  237  ## PropTypes.checkPropTypes

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/punycode/README.md:
   91  ### `punycode.toUnicode(input)`
   92  
   93: Converts a Punycode string representing a domain name or an email address to Unicode. Only the Punycoded parts of the input will be converted, i.e. it doesn't matter if you call it on a string that has already been converted to Unicode.
   94  
   95  ```js
   ..
  107  ### `punycode.toASCII(input)`
  108  
  109: Converts a lowercased Unicode string representing a domain name or an email address to Punycode. Only the non-ASCII parts of the input will be converted, i.e. it doesn't matter if you call it with a domain that's already in ASCII.
  110  
  111  ```js
  ...
  154  After cloning this repository, run `npm install --dev` to install the dependencies needed for Punycode.js development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.
  155  
  156: Once that's done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, PhantomJS, and web browsers as well, use `grunt test`.
  157  
  158  To generate the code coverage report, use `grunt cover`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/q/CHANGES.md:
  186  
  187  This release removes many layers of deprecated methods and brings Q closer to
  188: alignment with Mark Miller's TC39 [strawman][] for concurrency. At the same
  189  time, it fixes many bugs and adds a few features around error handling. Finally,
  190  it comes with an updated and comprehensive [API Reference][].
  ...
  417     callback are converted and the resolver and rejecter are arguments.
  418     This is a shorthand for making a deferred directly and inspired by
  419:    @gozala's stream constructor pattern and the Microsoft Windows Metro
  420     Promise constructor interface.
  421   - Added experimental ``Q.begin()`` that is intended to kick off chains

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/q/q.js:
  252  // There is no situation where this is necessary.
  253  // If you need a security guarantee, these primordials need to be
  254: // deeply frozen anyway, and if you don't need a security guarantee,
  255  // this is just plain paranoid.
  256  // However, this **might** have the nice side-effect of reducing the size of
  257  // the minified code by reducing x.call() to merely x()
  258: // See Mark Miller's explanation of what this does.
  259  // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
  260  var call = Function.call;
  ...
  979   * If an object is not a promise, it is as "near" as possible.
  980   * If a promise is rejected, it is as "near" as possible too.
  981:  * If it's a fulfilled promise, the fulfillment value is nearer.
  982:  * If it's a deferred promise and the deferred has been resolved, the
  983   * resolution is "nearer".
  984   * @param object

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/q/README.md:
   50  With this approach, you also get implicit error propagation, just like `try`,
   51  `catch`, and `finally`.  An error in `promisedStep1` will flow all the way to
   52: the `catch` function, where it's caught and handled.  (Here `promisedStepN` is
   53  a version of `stepN` that returns a promise.)
   54  
   55  The callback approach is called an “inversion of control”.
   56  A function that accepts a callback instead of a return value
   57: is saying, “Don't call me, I'll call you.”.  Promises
   58  [un-invert][IOC] the inversion, cleanly separating the input
   59  arguments from control flow arguments.  This simplifies the
   60: use and creation of API's, particularly variadic,
   61  rest and spread arguments.
   62  
   ..
  137  ### Propagation
  138  
  139: The ``then`` method returns a promise, which in this example, I'm
  140  assigning to ``outputPromise``.
  141  
  ...
  249  ```
  250  
  251: The only difference is nesting.  It's useful to nest handlers if you
  252  need to capture multiple input values in your closure.
  253  
  ...
  442  When you get to the end of a chain of promises, you should either
  443  return the last promise or end the chain.  Since handlers catch
  444: errors, it's an unfortunate pattern that the exceptions can go
  445  unobserved.
  446  
  ...
  464  ```
  465  
  466: Ending a promise chain makes sure that, if an error doesn't get
  467  handled before the end, it will get rethrown and reported.
  468  
  ...
  659  
  660  If you are using a function that may return a promise, but just might
  661: return a value if it doesn't need to defer, you can use the “static”
  662  methods of the Q library.
  663  
  ...
  688  When working with promises provided by other libraries, you should
  689  convert it to a Q promise.  Not all promise libraries make the same
  690: guarantees as Q and certainly don't provide all of the same methods.
  691  Most libraries only provide a partially functional ``then`` method.
  692  This thankfully is all we need to turn them into vibrant Q promises.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/qs/CHANGELOG.md:
    3  - [Refactor] name utils functions
    4  - [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape`
    5: - [Tests] up to `node` `v8.4`; use `nvm install-latest-npm` so newer npm doesn't break older node
    6  - [Tests] Use precise dist for Node.js 0.6 runtime (#225)
    7: - [Tests] make 0.6 required, now that it's passing
    8  - [Tests] on `node` `v8.2`; fix npm on node 0.6
    9  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/querystring/.package.json.un~:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/querystring/.Readme.md.un~:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/querystring/test/.index.js.un~:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md:
   23  
   24  ### What versioning scheme should be adopted?
   25: * group: +1's 3.0.0
   26  * domenic+group: pulling in patches from other sources where appropriate
   27  * mikeal: version independently, suggesting versions for io.js
   ..
   37    **action item:** domenic will check
   38  
   39: ### remove implicit flowing of streams on('data')
   40  * add isFlowing / isPaused
   41: * mikeal: worrying that we're documenting polyfill methods – confuses users
   42  * domenic: more reflective API is probably good, with warning labels for users
   43  * new section for mad scientists (reflective stream access)
   44  * calvin: name the “third state”
   45  * mikeal: maybe borrow the name from whatwg?
   46: * domenic: we're missing the “third state”
   47  * consensus: kind of difficult to name the third state
   48  * mikeal: figure out differences in states / compat

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/redux-thunk/README.md:
   15  
   16  Most tutorials today assume Redux Thunk 1.x so you might run into an issue when running their code with 2.x.  
   17: **If you use Redux Thunk 2.x in CommonJS environment, [don't forget to add `.default` to your import](https://github.com/gaearon/redux-thunk/releases/tag/v2.0.0):**
   18  
   19  ```diff
   ..
   22  ```
   23  
   24: If you used ES modules, you're already all good:
   25  
   26  ```js
   ..
   38  ## Why Do I Need This?
   39  
   40: If you're not sure whether you need it, you probably don't.
   41  
   42  **[Read this for an in-depth introduction to thunks in Redux.](http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559)**
   ..
   83  ```
   84  
   85: ## What's a thunk?!
   86  
   87  A [thunk](https://en.wikipedia.org/wiki/Thunk) is a function that wraps an expression to delay its evaluation.
   ..
  121  ## Composition
  122  
  123: Any return value from the inner function will be available as the return value of `dispatch` itself. This is convenient for orchestrating an asynchronous control flow with thunk action creators dispatching each other and returning Promises to wait for each other's completion:
  124  
  125  ```js
  ...
  197  );
  198  
  199: // It even takes care to return the thunk's return value
  200  // from the dispatch, so I can chain Promises as long as I return them.
  201  
  ...
  214      if (!getState().sandwiches.isShopOpen) {
  215  
  216:       // You don't have to return Promises, but it's a handy convention
  217        // so the caller can always call .then() on async dispatch result.
  218  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/regenerate/README.md:
  106  ```
  107  
  108: It's also possible to pass in a Regenerate instance. Doing so adds all code points in that instance to the current set.
  109  
  110  ```js
  ...
  130  ```
  131  
  132: It's also possible to pass in a Regenerate instance. Doing so removes all code points in that instance from the current set.
  133  
  134  ```js
  ...
  180  ```
  181  
  182: Instead of the `codePoints` array, it's also possible to pass in a Regenerate instance.
  183  
  184  ```js
  ...
  206  ### `regenerate.prototype.clone()`
  207  
  208: Returns a clone of the current code point set. Any actions performed on the clone won't mutate the original set.
  209  
  210  ```js
  ...
  226  ```
  227  
  228: If the `bmpOnly` property of the optional `options` object is set to `true`, the output matches surrogates individually, regardless of whether they're lone surrogates or just part of a surrogate pair. This simplifies the output, but it can only be used in case you're certain the strings it will be used on don't contain any astral symbols.
  229  
  230  ```js
  ...
  242  ```
  243  
  244: Note that lone low surrogates cannot be matched accurately using regular expressions in JavaScript. Regenerate's output makes a best-effort approach but [there can be false negatives in this regard](https://github.com/mathiasbynens/regenerate/issues/28#issuecomment-72224808).
  245  
  246  If the `hasUnicodeFlag` property of the optional `options` object is set to `true`, the output makes use of Unicode code point escapes (`\u{…}`) where applicable. This simplifies the output at the cost of compatibility and portability, since it means the output can only be used as a pattern in a regular expression with [the ES6 `u` flag](https://mathiasbynens.be/notes/es6-unicode-regex) enabled.
  ...
  273  ```
  274  
  275: **Note:** This probably shouldn't be used. Regenerate is intended as a tool that is used as part of a build process, not at runtime.
  276  
  277  ### `regenerate.prototype.valueOf()` or `regenerate.prototype.toArray()`
  ...
  293  ## Combine Regenerate with other libraries
  294  
  295: Regenerate gets even better when combined with other libraries such as [Punycode.js](https://mths.be/punycode). Here's an example where [Punycode.js](https://mths.be/punycode) is used to convert a string into an array of code points, that is then passed on to Regenerate:
  296  
  297  ```js
  ...
  308  ```
  309  
  310: In ES6 you can do something similar with [`Array.from`](https://mths.be/array-from) which uses [the string's iterator](https://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols) to split the given string into an array of strings that each contain a single symbol. [`regenerate()`](#regenerateprototypeaddvalue1-value2-value3-) accepts both strings and code points, remember?
  311  
  312  ```js
  ...
  330  After cloning this repository, run `npm install` to install the dependencies needed for Regenerate development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.
  331  
  332: Once that's done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.
  333  
  334  To generate the code coverage report, use `grunt cover`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/regenerate/regenerate.js:
   32  
   33  	// In Regenerate output, `\0` is never preceded by `\` because we sort by
   34: 	// code point value, so let's keep this regular expression simple.
   35  	var regexNull = /\\x00([^0123456789]|$)/g;
   36  
   ..
  352  				}
  353  
  354: 				// E.g. `[0, 11, 12, 16]` and we've added 5-15, so we now have
  355  				// `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the
  356  				// `0,16` range that was previously added.
  ...
  367  					} else {
  368  						// `start` lies within the range that was previously added, but
  369: 						// `end` doesn't. E.g. `[0, 11, 12, 31]` and we've added 5-15, so
  370  						// now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.
  371  						// Remove the previously added `end` and the current `start`.
  ...
  404  				// Replace `end` with the new value.
  405  				data[index + 1] = rangeEnd + 1;
  406: 				// Make sure the next range pair doesn't overlap, e.g. `[0, 11, 12, 14]`
  407  				// and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.
  408  				added = true;
  ...
  430  		var index = 0;
  431  		var length = data.length;
  432: 		// Exit early if `codePoint` is not within `data`'s overall range.
  433  		var start = data[index];
  434  		var end = data[length - 1];
  ...
  546  		) {
  547  			// The code point maps to an unsafe printable ASCII character;
  548: 			// backslash-escape it. Here's the list of those symbols:
  549  			//
  550  			//     $()*+-./?[\]^{|}
  ...
  572  		}
  573  
  574: 		// There's no need to account for astral symbols / surrogate pairs here,
  575  		// since `codePointToString` is private and only used for BMP code points.
  576: 		// But if that's what you need, just add an `else` block with this code:
  577  		//
  578  		//     string = '\\u' + pad(hex(highSurrogate(codePoint)), 4)
  ...
  598  		) {
  599  			// `first` is a high surrogate, and there is a next character. Assume
  600: 			// it's a low surrogate (else it's invalid usage of Regenerate anyway).
  601  			second = symbol.charCodeAt(1);
  602  			// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
  ...
 1022  			result.push(
 1023  				createBMPCharacterClasses(loneHighSurrogates) +
 1024: 				// Make sure the high surrogates aren't part of a surrogate pair.
 1025  				'(?![\\uDC00-\\uDFFF])'
 1026  			);
 ....
 1028  		if (hasLoneLowSurrogates) {
 1029  			result.push(
 1030: 				// It is not possible to accurately assert the low surrogates aren't
 1031  				// part of a surrogate pair, since JavaScript regular expressions do
 1032  				// not support lookbehind.
 ....
 1042  	// `regenerate` can be used as a constructor (and new methods can be added to
 1043  	// its prototype) but also as a regular function, the latter of which is the
 1044: 	// documented and most common usage. For that reason, it's not capitalized.
 1045  	var regenerate = function(value) {
 1046  		if (arguments.length > 1) {

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/regexpu-core/package.json:
   37    },
   38    "deprecated": false,
   39:   "description": "regexpu's core functionality (i.e. `rewritePattern(pattern, flag)`), capable of translating ES6 Unicode regular expressions to ES5.",
   40    "devDependencies": {
   41      "coveralls": "^2.11.2",

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/regexpu-core/README.md:
    3  _regexpu_ is a source code transpiler that enables the use of ES6 Unicode regular expressions in JavaScript-of-today (ES5).
    4  
    5: _regexpu-core_ contains _regexpu_'s core functionality, i.e. `rewritePattern(pattern, flag)`, which enables rewriting regular expressions that make use of [the ES6 `u` flag](https://mathiasbynens.be/notes/es6-unicode-regex) into equivalent ES5-compatible regular expression patterns.
    6  
    7  ## Installation

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/regjsgen/package.json:
   45    ],
   46    "deprecated": false,
   47:   "description": "Generate `RegExp`s from RegJSParser's AST",
   48    "devDependencies": {
   49      "got": "~1.2.0",

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/regjsgen/README.md:
    1  # RegJSGen
    2  
    3: Generate `RegExp`s from [RegJSParser](https://github.com/jviereck/regjsparser)'s AST.
    4  
    5  ## Installation

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/regjsparser/node_modules/jsesc/jsesc.js:
   52  	};
   53  	var isObject = function(value) {
   54: 		// This is a very simple check, but it's good enough for what we need.
   55  		return toString.call(value) == '[object Object]';
   56  	};
   ..
  142  				if (json) {
  143  					// For some values (e.g. `undefined`, `function` objects),
  144: 					// `JSON.stringify(value)` returns `undefined` (which isn't valid
  145  					// JSON) instead of `'null'`.
  146  					return JSON.stringify(argument) || 'null';
  147  				}
  148  				return String(argument);
  149: 			} else { // it's an object
  150  				result = [];
  151  				options.wrap = true;
  ...
  182  			if (options.es6) {
  183  				first = string.charCodeAt(index);
  184: 				if ( // check if it's the start of a surrogate pair
  185  					first >= 0xD800 && first <= 0xDBFF && // high surrogate
  186  					length > index + 1 // there is a next code unit
  ...
  198  			if (!options.escapeEverything) {
  199  				if (regexWhitelist.test(character)) {
  200: 					// It's a printable ASCII character that is not `"`, `'` or `\`,
  201: 					// so don't escape it.
  202  					result += character;
  203  					continue;

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/regjsparser/node_modules/jsesc/README.md:
    1  # jsesc [![Build status](https://travis-ci.org/mathiasbynens/jsesc.svg?branch=master)](https://travis-ci.org/mathiasbynens/jsesc) [![Code coverage status](http://img.shields.io/coveralls/mathiasbynens/jsesc/master.svg)](https://coveralls.io/r/mathiasbynens/jsesc) [![Dependency status](https://gemnasium.com/mathiasbynens/jsesc.svg)](https://gemnasium.com/mathiasbynens/jsesc)
    2  
    3: This is a JavaScript library for [escaping JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes) while generating the shortest possible valid ASCII-only output. [Here's an online demo.](http://mothereff.in/js-escapes)
    4  
    5  This can be used to avoid [mojibake](http://en.wikipedia.org/wiki/Mojibake) and other encoding issues, or even to [avoid errors](https://twitter.com/annevk/status/380000829643571200) when passing JSON-formatted data (which may contain U+2028 LINE SEPARATOR, U+2029 PARAGRAPH SEPARATOR, or [lone surrogates](http://esdiscuss.org/topic/code-points-vs-unicode-scalar-values#content-14)) to a JavaScript parser or an UTF-8 encoder, respectively.
    .
  160  #### `es6`
  161  
  162: The `es6` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, any astral Unicode symbols in the input will be escaped using [ECMAScript 6 Unicode code point escape sequences](http://mathiasbynens.be/notes/javascript-escapes#unicode-code-point) instead of using separate escape sequences for each surrogate half. If backwards compatibility with ES5 environments is a concern, don't enable this setting. If the `json` setting is enabled, the value for the `es6` setting is ignored (as if it was `false`).
  163  
  164  ```js
  ...
  209  #### `compact`
  210  
  211: The `compact` option takes a boolean value (`true` or `false`), and defaults to `true` (enabled). When enabled, the output for arrays and objects will be as compact as possible; it won't be formatted nicely.
  212  
  213  ```js
  ...
  258  #### `json`
  259  
  260: The `json` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output is valid JSON. [Hexadecimal character escape sequences](http://mathiasbynens.be/notes/javascript-escapes#hexadecimal) and [the `\v` or `\0` escape sequences](http://mathiasbynens.be/notes/javascript-escapes#single) will not be used. Setting `json: true` implies `quotes: 'double', wrap: true, es6: false`, although these values can still be overridden if needed — but in such cases, the output won't be valid JSON anymore.
  261  
  262  ```js
  ...
  276  // → '["foo\\u0000bar\\u00FF\\uFFFDbaz","foo\\u0000bar\\u00FF\\uFFFDbaz"]'
  277  
  278: // Values that are acceptable in JSON but aren't strings, arrays, or object
  279: // literals can't be escaped, so they'll just be preserved:
  280  jsesc([ 'foo\x00bar', [1, '©', { 'foo': true, 'qux': null }], 42 ], {
  281    'json': true
  282  });
  283  // → '["foo\\u0000bar",[1,"\\u00A9",{"foo":true,"qux":null}],42]'
  284: // Values that aren't allowed in JSON are run through `JSON.stringify()`:
  285  jsesc([ undefined, -Infinity ], {
  286    'json': true
  ...
  361  After cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.
  362  
  363: Once that's done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.
  364  
  365  To generate the code coverage report, use `grunt cover`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/request/README.md:
   56  ```
   57  
   58: You can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types (in this case `application/json`) and use the proper `content-type` in the PUT request (if the headers don't already provide one).
   59  
   60  ```js
   ..
   91  ```
   92  
   93: Now let's get fancy.
   94  
   95  ```js
   ..
  756  - `oauth` - Options for OAuth HMAC-SHA1 signing. See documentation above.
  757  - `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).
  758: - `aws` - `object` containing AWS signing information. Should have the properties `key`, `secret`, and optionally `session` (note that this only works for services that require session as part of the canonical string). Also requires the property `bucket`, unless you're specifying your `bucket` as part of the path, or the request doesn't use a bucket (i.e. GET Services). If you want to use AWS sign version 4 use the parameter `sign_version` with value `4` otherwise the default is version 2. **Note:** you need to `npm install aws4` first.
  759  - `httpSignature` - Options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent's library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options.
  760  
  ...
 1059  ```
 1060  
 1061: To use a custom cookie jar (instead of `request`'s global cookie jar), set `jar` to an instance of `request.jar()` (either in `defaults` or `options`)
 1062  
 1063  ```js

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/resolve-url/bower.json:
    2    "name": "resolve-url",
    3    "version": "0.2.1",
    4:   "description": "Like Node.js' `path.resolve`/`url.resolve` for the browser.",
    5    "authors": ["Simon Lydell"],
    6    "license": "MIT",

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/resolve-url/changelog.md:
    7  ### Version 0.2.0 (2014-02-24) ###
    8  
    9: - Disallow passing 0 arguments. It's weird and inconsistent between browsers.
   10    (Backwards incompatible change.)
   11  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/resolve-url/component.json:
    3    "version": "0.2.1",
    4    "license": "MIT",
    5:   "description": "Like Node.js' `path.resolve`/`url.resolve` for the browser.",
    6    "main": "resolve-url.js",
    7    "repo": "lydell/resolve-url",

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/resolve-url/package.json:
   31    "bundleDependencies": false,
   32    "deprecated": false,
   33:   "description": "Like Node.js' `path.resolve`/`url.resolve` for the browser.",
   34    "devDependencies": {
   35      "jshint": "~2.4.3",

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/resolve-url/readme.md:
    4  [![browser support](https://ci.testling.com/lydell/resolve-url.png)](https://ci.testling.com/lydell/resolve-url)
    5  
    6: Like Node.js' [`path.resolve`]/[`url.resolve`] for the browser.
    7  
    8  ```js
    .
   51  previous ones and `window.location`.
   52  
   53: It's like starting out on `window.location`, and then clicking links with the
   54  urls as `href` attributes in order, from left to right.
   55  
   56: Unlike Node.js' [`path.resolve`], this function always goes through all of the
   57  arguments, from left to right. `path.resolve` goes from right to left and only
   58  in the worst case goes through them all. Should that matter.
   ..
   64  
   65  Also note that this functions deals with urls, not paths, so in that respect it
   66: has more in common with Node.js' [`url.resolve`]. But the arguments are more
   67  like [`path.resolve`].
   68  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/box.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/cd.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/controller.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/film.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/font.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/image.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/map.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_add.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_attach.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_copy.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_delete.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_edit.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_error.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_excel.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_find.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_gear.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_go.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_green.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_key.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_lightning.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_link.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_paintbrush.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_paste.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_red.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_refresh.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_acrobat.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_actionscript.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_add.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_c.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_cd.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_code_red.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_coldfusion.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_compressed.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_cplusplus.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_csharp.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_cup.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_database.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_delete.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_dvd.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_error.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_excel.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_find.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_flash.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_freehand.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_gear.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_get.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_go.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_h.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_key.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_lightning.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_link.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_magnify.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_office.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_paintbrush.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_paste.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_php.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_picture.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_powerpoint.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_put.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_ruby.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_swoosh.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_text_width.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_tux.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_visualstudio.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_word.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_world.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_white_zip.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_word.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/serve-index/public/icons/page_world.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/source-map-resolve/changelog.md:
   40  ### Version 0.3.0 (2014-07-02) ###
   41  
   42: - Removed: Argument checking. It's not worth it. (Possibly
   43    backwards-incompatible change.)
   44  - Added: The `sourceRoot` property of source maps may now be ignored, which can

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/source-map-resolve/readme.md:
  168  parameter. The result is the same as when passing a function as the `read
  169  parameter`, except that the `sourcesContent` property of the result will be an
  170: empty array. In other words, the sources aren't read. You only get the
  171  `sourcesResolved` property. (This only supported in the synchronus version, since
  172  there is no point doing it asynchronusly.)
  ...
  176  The spec says that if a source map (as a string) starts with `)]}'`, it should
  177  be stripped off. This is to prevent XSSI attacks. This function does that and
  178: returns the result of `JSON.parse`ing what's left.
  179  
  180  If this function throws `error`, `error.sourceMapData === data`.
  ...
  196  sourceMappingURL comment. The spec defines yet a way to provide the URL to the
  197  source map: By sending the `SourceMap: <url>` header along with the generated
  198: file. Since this module doesn't retrive the generated code for you (instead
  199: _you_ give the generated code to the module), it's up to you to look for such a
  200  header when you retrieve the file (should the need arise).
  201  

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/source-map-url/changelog.md:
   20    So now they are matched also when they appear on the same line as code.
   21  
   22: - Removed: The `.set()` method. I couldn't decide how it should work
   23    considering the above change. Moreover, it was unnecessarily complex (and
   24    would have gotten worse) for very little gain. It is much easier to run

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/spdy-transport/coverage/lcov-report/sort-arrow-sprite.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/stream-http/test/server/static/browserify.png:
    <binary>

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/svgo/plugins/cleanupNumericValues.js:
    5  exports.active = true;
    6  
    7: exports.description = 'rounds numeric values to the fixed precision, removes default 'px' units';
    8  
    9  exports.params = {

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/svgo/plugins/convertStyleToAttrs.js:
   11      stylingProps = require('./_collections').attrsGroups.presentation,
   12      rEscape = '\\\\(?:[0-9a-f]{1,6}\\s?|\\r\\n|.)',                 // Like \" or \2051. Code points consume one space.
   13:     rAttr = '\\s*(' + g('[^:;\\\\]', rEscape) + '*?)\\s*',          // attribute name like 'fill'
   14      rSingleQuotes = "'(?:[^'\\n\\r\\\\]|" + rEscape + ")*?(?:'|$)", // string in single quotes: 'smth'
   15      rQuotes = '"(?:[^"\\n\\r\\\\]|' + rEscape + ')*?(?:"|$)',       // string in double quotes: "smth"

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/svgo/plugins/removeNonInheritableGroupAttrs.js:
    5  exports.active = true;
    6  
    7: exports.description = 'removes non-inheritable group's presentational attributes';
    8  
    9  var inheritableAttrs = require('./_collections').inheritableAttrs,

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/ua-parser-js/readme.md:
  308  # Donate
  309  
  310: Do you use & like UAParser.js but you don't find a way to show some love? If yes, please consider donating to support this project. Otherwise, no worries, regardless of whether there is support or not, I will keep maintaining this project. Still, if you buy me a cup of coffee I would be more than happy though :)
  311  
  312  [![Support via Pledgie](https://pledgie.com/campaigns/34252.png?skin_name=chrome)](https://pledgie.com/campaigns/34252)

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/uglifyjs-webpack-plugin/README.md:
   95  `mangle.props (boolean|object)` - Passing `true` or an object enables and provides options for UglifyJS property mangling - see [UglifyJS documentation](https://github.com/mishoo/UglifyJS2/tree/v2.x#mangleproperties-options) for mangleProperties options.
   96  
   97: > Note: the UglifyJS docs warn that [you will probably break your source if you use property mangling](https://github.com/mishoo/UglifyJS2/tree/v2.x#mangling-property-names---mangle-props), so if you aren't sure why you'd need this feature, you most likely shouldn't be using it! This is **not** enabled by default.
   98  
   99  Example configuration, this will mangle both names and properties:

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/url/node_modules/punycode/README.md:
   91  ### `punycode.toUnicode(input)`
   92  
   93: Converts a Punycode string representing a domain name or an email address to Unicode. Only the Punycoded parts of the input will be converted, i.e. it doesn't matter if you call it on a string that has already been converted to Unicode.
   94  
   95  ```js
   ..
  107  ### `punycode.toASCII(input)`
  108  
  109: Converts a Unicode string representing a domain name or an email address to Punycode. Only the non-ASCII parts of the input will be converted, i.e. it doesn't matter if you call it with a domain that's already in ASCII.
  110  
  111  ```js
  ...
  154  After cloning this repository, run `npm install --dev` to install the dependencies needed for Punycode.js development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.
  155  
  156: Once that's done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, PhantomJS, and web browsers as well, use `grunt test`.
  157  
  158  To generate the code coverage report, use `grunt cover`.

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/webpack-dev-server/node_modules/chokidar/index.js:
  146    this.options = opts;
  147  
  148:   // You're frozen when your heart's not open.
  149    Object.freeze(opts);
  150  }

/Users/n635185/Desktop/ITGirls/carevolcano/node_modules/webpack/schemas/webpackOptionsSchema.json:
  324          },
  325          "devtoolLineToLine": {
  326:           "description": "Enable line to line mapped mode for all/specified modules. Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source. It's a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.",
  327            "anyOf": [
  328              {

/Users/n635185/Desktop/ITGirls/carevolcano/reducers/message.js:
    1: import { SET_MESSAGE } from '../types/message';
    2  const initState = {
    3:  message: ''
    4  }
    5  export default (state = initState, action) => {

/Users/n635185/Desktop/ITGirls/carevolcano/store.js:
    1: import { createStore, combineReducers, applyMiddleware } from 'redux'
    2: import messageReducer from './reducers/message'
    3: import thunk from 'redux-thunk'
    4  
    5  const reducer = combineReducers({

/Users/n635185/Desktop/ITGirls/carevolcano/types/message.js:
    1: export const SET_MESSAGE = 'SET_MESSAGE';

2880 matches across 293 files
